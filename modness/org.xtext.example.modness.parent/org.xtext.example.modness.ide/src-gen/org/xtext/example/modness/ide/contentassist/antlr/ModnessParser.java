/*
 * generated by Xtext 2.35.0.M1
 */
package org.xtext.example.modness.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.modness.ide.contentassist.antlr.internal.InternalModnessParser;
import org.xtext.example.modness.services.ModnessGrammarAccess;

public class ModnessParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ModnessGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ModnessGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEqualityOperatorAccess().getAlternatives(), "rule__EqualityOperator__Alternatives");
			builder.put(grammarAccess.getFunctionAccess().getAlternatives(), "rule__Function__Alternatives");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getVariableValueAccess().getAlternatives(), "rule__VariableValue__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getBiasSourceAccess().getAlternatives(), "rule__BiasSource__Alternatives");
			builder.put(grammarAccess.getSingleOperatorParameterAccess().getAlternatives(), "rule__SingleOperatorParameter__Alternatives");
			builder.put(grammarAccess.getRangeOperatorParameterAccess().getAlternatives(), "rule__RangeOperatorParameter__Alternatives");
			builder.put(grammarAccess.getArithmeticOperatorAccess().getAlternatives(), "rule__ArithmeticOperator__Alternatives");
			builder.put(grammarAccess.getLogicalOperatorAccess().getAlternatives(), "rule__LogicalOperator__Alternatives");
			builder.put(grammarAccess.getGroupFairnessMetricAccess().getAlternatives(), "rule__GroupFairnessMetric__Alternatives");
			builder.put(grammarAccess.getIndividualFairnessMetricAccess().getAlternatives(), "rule__IndividualFairnessMetric__Alternatives");
			builder.put(grammarAccess.getGroupBiasAccess().getGroup(), "rule__GroupBias__Group__0");
			builder.put(grammarAccess.getGroupBiasAccess().getGroup_8(), "rule__GroupBias__Group_8__0");
			builder.put(grammarAccess.getGroupBiasAccess().getGroup_13(), "rule__GroupBias__Group_13__0");
			builder.put(grammarAccess.getGroupBiasAccess().getGroup_21(), "rule__GroupBias__Group_21__0");
			builder.put(grammarAccess.getGroupBiasAccess().getGroup_26(), "rule__GroupBias__Group_26__0");
			builder.put(grammarAccess.getGroupBiasAccess().getGroup_31(), "rule__GroupBias__Group_31__0");
			builder.put(grammarAccess.getSensitiveVariableAccess().getGroup(), "rule__SensitiveVariable__Group__0");
			builder.put(grammarAccess.getSensitiveVariableAccess().getGroup_6(), "rule__SensitiveVariable__Group_6__0");
			builder.put(grammarAccess.getSensitiveGroupAccess().getGroup(), "rule__SensitiveGroup__Group__0");
			builder.put(grammarAccess.getSensitiveGroupAccess().getGroup_7(), "rule__SensitiveGroup__Group_7__0");
			builder.put(grammarAccess.getGroupAnalysisAccess().getGroup(), "rule__GroupAnalysis__Group__0");
			builder.put(grammarAccess.getGroupAnalysisAccess().getGroup_2(), "rule__GroupAnalysis__Group_2__0");
			builder.put(grammarAccess.getGroupAnalysisAccess().getGroup_7(), "rule__GroupAnalysis__Group_7__0");
			builder.put(grammarAccess.getGroupAnalysisAccess().getGroup_12(), "rule__GroupAnalysis__Group_12__0");
			builder.put(grammarAccess.getGroupAnalysisAccess().getGroup_16(), "rule__GroupAnalysis__Group_16__0");
			builder.put(grammarAccess.getGroupAnalysisAccess().getGroup_19(), "rule__GroupAnalysis__Group_19__0");
			builder.put(grammarAccess.getMetricAccess().getGroup(), "rule__Metric__Group__0");
			builder.put(grammarAccess.getDatasetAccess().getGroup(), "rule__Dataset__Group__0");
			builder.put(grammarAccess.getDatasetAccess().getGroup_5(), "rule__Dataset__Group_5__0");
			builder.put(grammarAccess.getDatasetAccess().getGroup_6(), "rule__Dataset__Group_6__0");
			builder.put(grammarAccess.getDatasetAccess().getGroup_10(), "rule__Dataset__Group_10__0");
			builder.put(grammarAccess.getDatasetAccess().getGroup_10_3(), "rule__Dataset__Group_10_3__0");
			builder.put(grammarAccess.getDatasetAccess().getGroup_16(), "rule__Dataset__Group_16__0");
			builder.put(grammarAccess.getDatasetSensitiveGroupAccess().getGroup(), "rule__DatasetSensitiveGroup__Group__0");
			builder.put(grammarAccess.getDatasetSensitiveGroupAccess().getGroup_7(), "rule__DatasetSensitiveGroup__Group_7__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
			builder.put(grammarAccess.getSingleOperatorAccess().getGroup(), "rule__SingleOperator__Group__0");
			builder.put(grammarAccess.getRangeOperatorAccess().getGroup(), "rule__RangeOperator__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getProbabilityAccess().getGroup(), "rule__Probability__Group__0");
			builder.put(grammarAccess.getProbabilityAccess().getGroup_5(), "rule__Probability__Group_5__0");
			builder.put(grammarAccess.getExpectedValueAccess().getGroup(), "rule__ExpectedValue__Group__0");
			builder.put(grammarAccess.getExpectedValueAccess().getGroup_5(), "rule__ExpectedValue__Group_5__0");
			builder.put(grammarAccess.getGroupSizeAccess().getGroup(), "rule__GroupSize__Group__0");
			builder.put(grammarAccess.getGroupSizeAccess().getGroup_4(), "rule__GroupSize__Group_4__0");
			builder.put(grammarAccess.getGroupSizeAccess().getGroup_5(), "rule__GroupSize__Group_5__0");
			builder.put(grammarAccess.getDatasetSizeAccess().getGroup(), "rule__DatasetSize__Group__0");
			builder.put(grammarAccess.getLogaritmAccess().getGroup(), "rule__Logaritm__Group__0");
			builder.put(grammarAccess.getSummationAccess().getGroup(), "rule__Summation__Group__0");
			builder.put(grammarAccess.getExistingGroupFairnessMetricAccess().getGroup(), "rule__ExistingGroupFairnessMetric__Group__0");
			builder.put(grammarAccess.getExistingIndividualFairnessMetricAccess().getGroup(), "rule__ExistingIndividualFairnessMetric__Group__0");
			builder.put(grammarAccess.getOperatorComponentAccess().getGroup(), "rule__OperatorComponent__Group__0");
			builder.put(grammarAccess.getOperatorComponentAccess().getGroup_4(), "rule__OperatorComponent__Group_4__0");
			builder.put(grammarAccess.getOperatorComponentAccess().getGroup_5(), "rule__OperatorComponent__Group_5__0");
			builder.put(grammarAccess.getOperationValueAccess().getGroup(), "rule__OperationValue__Group__0");
			builder.put(grammarAccess.getLogicalConditionAccess().getGroup(), "rule__LogicalCondition__Group__0");
			builder.put(grammarAccess.getLogicalConditionAccess().getGroup_4(), "rule__LogicalCondition__Group_4__0");
			builder.put(grammarAccess.getLogicalConditionAccess().getGroup_5(), "rule__LogicalCondition__Group_5__0");
			builder.put(grammarAccess.getLogicalConditionAccess().getGroup_6(), "rule__LogicalCondition__Group_6__0");
			builder.put(grammarAccess.getSubLogicalConditionAccess().getGroup(), "rule__SubLogicalCondition__Group__0");
			builder.put(grammarAccess.getVariableValue_ImplAccess().getGroup(), "rule__VariableValue_Impl__Group__0");
			builder.put(grammarAccess.getDatasetPositiveOutcomeAccess().getGroup(), "rule__DatasetPositiveOutcome__Group__0");
			builder.put(grammarAccess.getDatasetSensitiveVariableValueAccess().getGroup(), "rule__DatasetSensitiveVariableValue__Group__0");
			builder.put(grammarAccess.getDatasetSensitiveVariableValueAccess().getGroup_10(), "rule__DatasetSensitiveVariableValue__Group_10__0");
			builder.put(grammarAccess.getOtherVariableAccess().getGroup(), "rule__OtherVariable__Group__0");
			builder.put(grammarAccess.getOtherVariableAccess().getGroup_4(), "rule__OtherVariable__Group_4__0");
			builder.put(grammarAccess.getOtherVariableAccess().getGroup_4_3(), "rule__OtherVariable__Group_4_3__0");
			builder.put(grammarAccess.getDatasetSensitiveVariableAccess().getGroup(), "rule__DatasetSensitiveVariable__Group__0");
			builder.put(grammarAccess.getDatasetSensitiveVariableAccess().getGroup_11(), "rule__DatasetSensitiveVariable__Group_11__0");
			builder.put(grammarAccess.getGroupBiasAccess().getNameAssignment_1(), "rule__GroupBias__NameAssignment_1");
			builder.put(grammarAccess.getGroupBiasAccess().getDomainAssignment_4(), "rule__GroupBias__DomainAssignment_4");
			builder.put(grammarAccess.getGroupBiasAccess().getSourceAssignment_7(), "rule__GroupBias__SourceAssignment_7");
			builder.put(grammarAccess.getGroupBiasAccess().getSourceAssignment_8_1(), "rule__GroupBias__SourceAssignment_8_1");
			builder.put(grammarAccess.getGroupBiasAccess().getSensitiveVariablesAssignment_12(), "rule__GroupBias__SensitiveVariablesAssignment_12");
			builder.put(grammarAccess.getGroupBiasAccess().getSensitiveVariablesAssignment_13_1(), "rule__GroupBias__SensitiveVariablesAssignment_13_1");
			builder.put(grammarAccess.getGroupBiasAccess().getPositiveOutcomeAssignment_16(), "rule__GroupBias__PositiveOutcomeAssignment_16");
			builder.put(grammarAccess.getGroupBiasAccess().getUnprivilegedGroupAssignment_20(), "rule__GroupBias__UnprivilegedGroupAssignment_20");
			builder.put(grammarAccess.getGroupBiasAccess().getUnprivilegedGroupAssignment_21_1(), "rule__GroupBias__UnprivilegedGroupAssignment_21_1");
			builder.put(grammarAccess.getGroupBiasAccess().getPrivilegedGroupAssignment_25(), "rule__GroupBias__PrivilegedGroupAssignment_25");
			builder.put(grammarAccess.getGroupBiasAccess().getPrivilegedGroupAssignment_26_1(), "rule__GroupBias__PrivilegedGroupAssignment_26_1");
			builder.put(grammarAccess.getGroupBiasAccess().getAnalysisAssignment_30(), "rule__GroupBias__AnalysisAssignment_30");
			builder.put(grammarAccess.getGroupBiasAccess().getAnalysisAssignment_31_1(), "rule__GroupBias__AnalysisAssignment_31_1");
			builder.put(grammarAccess.getSensitiveVariableAccess().getNameAssignment_2(), "rule__SensitiveVariable__NameAssignment_2");
			builder.put(grammarAccess.getSensitiveVariableAccess().getSensitiveVariableValueAssignment_5(), "rule__SensitiveVariable__SensitiveVariableValueAssignment_5");
			builder.put(grammarAccess.getSensitiveVariableAccess().getSensitiveVariableValueAssignment_6_1(), "rule__SensitiveVariable__SensitiveVariableValueAssignment_6_1");
			builder.put(grammarAccess.getPositiveOutcomeAccess().getNameAssignment(), "rule__PositiveOutcome__NameAssignment");
			builder.put(grammarAccess.getSensitiveGroupAccess().getNameAssignment_3(), "rule__SensitiveGroup__NameAssignment_3");
			builder.put(grammarAccess.getSensitiveGroupAccess().getSensitiveValueAssignment_6(), "rule__SensitiveGroup__SensitiveValueAssignment_6");
			builder.put(grammarAccess.getSensitiveGroupAccess().getSensitiveValueAssignment_7_1(), "rule__SensitiveGroup__SensitiveValueAssignment_7_1");
			builder.put(grammarAccess.getGroupAnalysisAccess().getScopeAssignment_2_1(), "rule__GroupAnalysis__ScopeAssignment_2_1");
			builder.put(grammarAccess.getGroupAnalysisAccess().getMetricAssignment_6(), "rule__GroupAnalysis__MetricAssignment_6");
			builder.put(grammarAccess.getGroupAnalysisAccess().getMetricAssignment_7_1(), "rule__GroupAnalysis__MetricAssignment_7_1");
			builder.put(grammarAccess.getGroupAnalysisAccess().getDatasetAssignment_11(), "rule__GroupAnalysis__DatasetAssignment_11");
			builder.put(grammarAccess.getGroupAnalysisAccess().getDatasetAssignment_12_1(), "rule__GroupAnalysis__DatasetAssignment_12_1");
			builder.put(grammarAccess.getGroupAnalysisAccess().getDatasetUnprivilegedGroupAssignment_15(), "rule__GroupAnalysis__DatasetUnprivilegedGroupAssignment_15");
			builder.put(grammarAccess.getGroupAnalysisAccess().getDatasetUnprivilegedGroupAssignment_16_1(), "rule__GroupAnalysis__DatasetUnprivilegedGroupAssignment_16_1");
			builder.put(grammarAccess.getGroupAnalysisAccess().getDatasetPrivilegedGroupAssignment_18(), "rule__GroupAnalysis__DatasetPrivilegedGroupAssignment_18");
			builder.put(grammarAccess.getGroupAnalysisAccess().getDatasetPrivilegedGroupAssignment_19_1(), "rule__GroupAnalysis__DatasetPrivilegedGroupAssignment_19_1");
			builder.put(grammarAccess.getSensitiveVariableValueAccess().getNameAssignment(), "rule__SensitiveVariableValue__NameAssignment");
			builder.put(grammarAccess.getMetricAccess().getNameAssignment_3(), "rule__Metric__NameAssignment_3");
			builder.put(grammarAccess.getMetricAccess().getToleranceValueAssignment_6(), "rule__Metric__ToleranceValueAssignment_6");
			builder.put(grammarAccess.getMetricAccess().getOperatorAssignment_9(), "rule__Metric__OperatorAssignment_9");
			builder.put(grammarAccess.getMetricAccess().getFunctionAssignment_11(), "rule__Metric__FunctionAssignment_11");
			builder.put(grammarAccess.getDatasetAccess().getNameAssignment_3(), "rule__Dataset__NameAssignment_3");
			builder.put(grammarAccess.getDatasetAccess().getGroundTruthLabelNameAssignment_5_1(), "rule__Dataset__GroundTruthLabelNameAssignment_5_1");
			builder.put(grammarAccess.getDatasetAccess().getPredictedLabelNameAssignment_6_1(), "rule__Dataset__PredictedLabelNameAssignment_6_1");
			builder.put(grammarAccess.getDatasetAccess().getFilePathAssignment_8(), "rule__Dataset__FilePathAssignment_8");
			builder.put(grammarAccess.getDatasetAccess().getOtherVariableAssignment_10_2(), "rule__Dataset__OtherVariableAssignment_10_2");
			builder.put(grammarAccess.getDatasetAccess().getOtherVariableAssignment_10_3_1(), "rule__Dataset__OtherVariableAssignment_10_3_1");
			builder.put(grammarAccess.getDatasetAccess().getPositiveOutcomeAssignment_12(), "rule__Dataset__PositiveOutcomeAssignment_12");
			builder.put(grammarAccess.getDatasetAccess().getDatasetSentiveVariableAssignment_15(), "rule__Dataset__DatasetSentiveVariableAssignment_15");
			builder.put(grammarAccess.getDatasetAccess().getDatasetSentiveVariableAssignment_16_1(), "rule__Dataset__DatasetSentiveVariableAssignment_16_1");
			builder.put(grammarAccess.getDatasetSensitiveGroupAccess().getMappingGroupAssignment_2(), "rule__DatasetSensitiveGroup__MappingGroupAssignment_2");
			builder.put(grammarAccess.getDatasetSensitiveGroupAccess().getSensitiveVariablesAssignment_6(), "rule__DatasetSensitiveGroup__SensitiveVariablesAssignment_6");
			builder.put(grammarAccess.getDatasetSensitiveGroupAccess().getSensitiveVariablesAssignment_7_1(), "rule__DatasetSensitiveGroup__SensitiveVariablesAssignment_7_1");
			builder.put(grammarAccess.getSingleOperatorAccess().getOperatorAssignment_2(), "rule__SingleOperator__OperatorAssignment_2");
			builder.put(grammarAccess.getSingleOperatorAccess().getValueAssignment_5(), "rule__SingleOperator__ValueAssignment_5");
			builder.put(grammarAccess.getRangeOperatorAccess().getOperatorAssignment_2(), "rule__RangeOperator__OperatorAssignment_2");
			builder.put(grammarAccess.getRangeOperatorAccess().getLowerValueAssignment_5(), "rule__RangeOperator__LowerValueAssignment_5");
			builder.put(grammarAccess.getRangeOperatorAccess().getGreaterValueAssignment_8(), "rule__RangeOperator__GreaterValueAssignment_8");
			builder.put(grammarAccess.getOperationAccess().getNameAssignment_1(), "rule__Operation__NameAssignment_1");
			builder.put(grammarAccess.getOperationAccess().getEqualityOperatorAssignment_4(), "rule__Operation__EqualityOperatorAssignment_4");
			builder.put(grammarAccess.getOperationAccess().getLeftSideAssignment_6(), "rule__Operation__LeftSideAssignment_6");
			builder.put(grammarAccess.getOperationAccess().getRightSideAssignment_8(), "rule__Operation__RightSideAssignment_8");
			builder.put(grammarAccess.getProbabilityAccess().getNameAssignment_1(), "rule__Probability__NameAssignment_1");
			builder.put(grammarAccess.getProbabilityAccess().getObjectAssignment_4(), "rule__Probability__ObjectAssignment_4");
			builder.put(grammarAccess.getProbabilityAccess().getConditionAssignment_5_1(), "rule__Probability__ConditionAssignment_5_1");
			builder.put(grammarAccess.getExpectedValueAccess().getNameAssignment_1(), "rule__ExpectedValue__NameAssignment_1");
			builder.put(grammarAccess.getExpectedValueAccess().getColumnNameAssignment_4(), "rule__ExpectedValue__ColumnNameAssignment_4");
			builder.put(grammarAccess.getExpectedValueAccess().getConditionAssignment_5_1(), "rule__ExpectedValue__ConditionAssignment_5_1");
			builder.put(grammarAccess.getGroupSizeAccess().getNameAssignment_2(), "rule__GroupSize__NameAssignment_2");
			builder.put(grammarAccess.getGroupSizeAccess().getVariableAssignment_4_1(), "rule__GroupSize__VariableAssignment_4_1");
			builder.put(grammarAccess.getGroupSizeAccess().getGroupConditionAssignment_5_1(), "rule__GroupSize__GroupConditionAssignment_5_1");
			builder.put(grammarAccess.getDatasetSizeAccess().getNameAssignment_2(), "rule__DatasetSize__NameAssignment_2");
			builder.put(grammarAccess.getLogaritmAccess().getNameAssignment_1(), "rule__Logaritm__NameAssignment_1");
			builder.put(grammarAccess.getLogaritmAccess().getOperatorcomponentAssignment_4(), "rule__Logaritm__OperatorcomponentAssignment_4");
			builder.put(grammarAccess.getSummationAccess().getNameAssignment_1(), "rule__Summation__NameAssignment_1");
			builder.put(grammarAccess.getSummationAccess().getStartRangeAssignment_4(), "rule__Summation__StartRangeAssignment_4");
			builder.put(grammarAccess.getSummationAccess().getEndRangeAssignment_6(), "rule__Summation__EndRangeAssignment_6");
			builder.put(grammarAccess.getSummationAccess().getBodyAssignment_8(), "rule__Summation__BodyAssignment_8");
			builder.put(grammarAccess.getExistingGroupFairnessMetricAccess().getMetricAssignment_3(), "rule__ExistingGroupFairnessMetric__MetricAssignment_3");
			builder.put(grammarAccess.getExistingIndividualFairnessMetricAccess().getNameAssignment_1(), "rule__ExistingIndividualFairnessMetric__NameAssignment_1");
			builder.put(grammarAccess.getExistingIndividualFairnessMetricAccess().getMetricAssignment_4(), "rule__ExistingIndividualFairnessMetric__MetricAssignment_4");
			builder.put(grammarAccess.getOperatorComponentAccess().getNameAssignment_2(), "rule__OperatorComponent__NameAssignment_2");
			builder.put(grammarAccess.getOperatorComponentAccess().getFunctionAssignment_4_1(), "rule__OperatorComponent__FunctionAssignment_4_1");
			builder.put(grammarAccess.getOperatorComponentAccess().getOperationvalueAssignment_5_1(), "rule__OperatorComponent__OperationvalueAssignment_5_1");
			builder.put(grammarAccess.getOperationValueAccess().getValueAssignment_3(), "rule__OperationValue__ValueAssignment_3");
			builder.put(grammarAccess.getLogicalConditionAccess().getNameAssignment_2(), "rule__LogicalCondition__NameAssignment_2");
			builder.put(grammarAccess.getLogicalConditionAccess().getValueAssignment_4_1(), "rule__LogicalCondition__ValueAssignment_4_1");
			builder.put(grammarAccess.getLogicalConditionAccess().getSensitivegroupAssignment_5_1(), "rule__LogicalCondition__SensitivegroupAssignment_5_1");
			builder.put(grammarAccess.getLogicalConditionAccess().getSublogicalconditionAssignment_6_1(), "rule__LogicalCondition__SublogicalconditionAssignment_6_1");
			builder.put(grammarAccess.getSubLogicalConditionAccess().getNameAssignment_1(), "rule__SubLogicalCondition__NameAssignment_1");
			builder.put(grammarAccess.getSubLogicalConditionAccess().getLogicalOperatorAssignment_4(), "rule__SubLogicalCondition__LogicalOperatorAssignment_4");
			builder.put(grammarAccess.getSubLogicalConditionAccess().getLogicalconditionAssignment_6(), "rule__SubLogicalCondition__LogicalconditionAssignment_6");
			builder.put(grammarAccess.getVariableValue_ImplAccess().getRelativeToDatasetSizeAssignment_0(), "rule__VariableValue_Impl__RelativeToDatasetSizeAssignment_0");
			builder.put(grammarAccess.getVariableValue_ImplAccess().getNameAssignment_2(), "rule__VariableValue_Impl__NameAssignment_2");
			builder.put(grammarAccess.getVariableValue_ImplAccess().getOperatorAssignment_5(), "rule__VariableValue_Impl__OperatorAssignment_5");
			builder.put(grammarAccess.getDatasetPositiveOutcomeAccess().getRelativeToDatasetSizeAssignment_0(), "rule__DatasetPositiveOutcome__RelativeToDatasetSizeAssignment_0");
			builder.put(grammarAccess.getDatasetPositiveOutcomeAccess().getMappingPositiveOutcomeAssignment_3(), "rule__DatasetPositiveOutcome__MappingPositiveOutcomeAssignment_3");
			builder.put(grammarAccess.getDatasetPositiveOutcomeAccess().getOperatorAssignment_6(), "rule__DatasetPositiveOutcome__OperatorAssignment_6");
			builder.put(grammarAccess.getDatasetSensitiveVariableValueAccess().getNameAssignment_3(), "rule__DatasetSensitiveVariableValue__NameAssignment_3");
			builder.put(grammarAccess.getDatasetSensitiveVariableValueAccess().getMappingValueAssignment_6(), "rule__DatasetSensitiveVariableValue__MappingValueAssignment_6");
			builder.put(grammarAccess.getDatasetSensitiveVariableValueAccess().getOperatorAssignment_9(), "rule__DatasetSensitiveVariableValue__OperatorAssignment_9");
			builder.put(grammarAccess.getDatasetSensitiveVariableValueAccess().getRelativeToDatasetSizeAssignment_10_0(), "rule__DatasetSensitiveVariableValue__RelativeToDatasetSizeAssignment_10_0");
			builder.put(grammarAccess.getOtherVariableAccess().getNameAssignment_2(), "rule__OtherVariable__NameAssignment_2");
			builder.put(grammarAccess.getOtherVariableAccess().getOthervariablevalueAssignment_4_2(), "rule__OtherVariable__OthervariablevalueAssignment_4_2");
			builder.put(grammarAccess.getOtherVariableAccess().getOthervariablevalueAssignment_4_3_1(), "rule__OtherVariable__OthervariablevalueAssignment_4_3_1");
			builder.put(grammarAccess.getDatasetSensitiveVariableAccess().getNameAssignment_3(), "rule__DatasetSensitiveVariable__NameAssignment_3");
			builder.put(grammarAccess.getDatasetSensitiveVariableAccess().getMappingSensitiveVariableAssignment_6(), "rule__DatasetSensitiveVariable__MappingSensitiveVariableAssignment_6");
			builder.put(grammarAccess.getDatasetSensitiveVariableAccess().getDatasetsensitivevariablevalueAssignment_10(), "rule__DatasetSensitiveVariable__DatasetsensitivevariablevalueAssignment_10");
			builder.put(grammarAccess.getDatasetSensitiveVariableAccess().getDatasetsensitivevariablevalueAssignment_11_1(), "rule__DatasetSensitiveVariable__DatasetsensitivevariablevalueAssignment_11_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ModnessGrammarAccess grammarAccess;

	@Override
	protected InternalModnessParser createParser() {
		InternalModnessParser result = new InternalModnessParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ModnessGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ModnessGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
