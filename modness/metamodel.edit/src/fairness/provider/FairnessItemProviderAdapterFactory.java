/**
 */
package fairness.provider;

import fairness.util.FairnessAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FairnessItemProviderAdapterFactory extends FairnessAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FairnessItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.OperatorComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorComponentItemProvider operatorComponentItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.OperatorComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatorComponentAdapter() {
		if (operatorComponentItemProvider == null) {
			operatorComponentItemProvider = new OperatorComponentItemProvider(this);
		}

		return operatorComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.GroupAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupAnalysisItemProvider groupAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.GroupAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAnalysisAdapter() {
		if (groupAnalysisItemProvider == null) {
			groupAnalysisItemProvider = new GroupAnalysisItemProvider(this);
		}

		return groupAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.IndividualAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualAnalysisItemProvider individualAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.IndividualAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualAnalysisAdapter() {
		if (individualAnalysisItemProvider == null) {
			individualAnalysisItemProvider = new IndividualAnalysisItemProvider(this);
		}

		return individualAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.SensitiveVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensitiveVariableItemProvider sensitiveVariableItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.SensitiveVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensitiveVariableAdapter() {
		if (sensitiveVariableItemProvider == null) {
			sensitiveVariableItemProvider = new SensitiveVariableItemProvider(this);
		}

		return sensitiveVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.Probability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProbabilityItemProvider probabilityItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.Probability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProbabilityAdapter() {
		if (probabilityItemProvider == null) {
			probabilityItemProvider = new ProbabilityItemProvider(this);
		}

		return probabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.ExpectedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpectedValueItemProvider expectedValueItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.ExpectedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpectedValueAdapter() {
		if (expectedValueItemProvider == null) {
			expectedValueItemProvider = new ExpectedValueItemProvider(this);
		}

		return expectedValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.GroupSize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupSizeItemProvider groupSizeItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.GroupSize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupSizeAdapter() {
		if (groupSizeItemProvider == null) {
			groupSizeItemProvider = new GroupSizeItemProvider(this);
		}

		return groupSizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.LogicalCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalConditionItemProvider logicalConditionItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.LogicalCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalConditionAdapter() {
		if (logicalConditionItemProvider == null) {
			logicalConditionItemProvider = new LogicalConditionItemProvider(this);
		}

		return logicalConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.OperationValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationValueItemProvider operationValueItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.OperationValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationValueAdapter() {
		if (operationValueItemProvider == null) {
			operationValueItemProvider = new OperationValueItemProvider(this);
		}

		return operationValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.SubLogicalCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubLogicalConditionItemProvider subLogicalConditionItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.SubLogicalCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubLogicalConditionAdapter() {
		if (subLogicalConditionItemProvider == null) {
			subLogicalConditionItemProvider = new SubLogicalConditionItemProvider(this);
		}

		return subLogicalConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.PositiveOutcome} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositiveOutcomeItemProvider positiveOutcomeItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.PositiveOutcome}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositiveOutcomeAdapter() {
		if (positiveOutcomeItemProvider == null) {
			positiveOutcomeItemProvider = new PositiveOutcomeItemProvider(this);
		}

		return positiveOutcomeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.GroupBias} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupBiasItemProvider groupBiasItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.GroupBias}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupBiasAdapter() {
		if (groupBiasItemProvider == null) {
			groupBiasItemProvider = new GroupBiasItemProvider(this);
		}

		return groupBiasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.IndividualBias} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualBiasItemProvider individualBiasItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.IndividualBias}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualBiasAdapter() {
		if (individualBiasItemProvider == null) {
			individualBiasItemProvider = new IndividualBiasItemProvider(this);
		}

		return individualBiasItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.SensitiveGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensitiveGroupItemProvider sensitiveGroupItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.SensitiveGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensitiveGroupAdapter() {
		if (sensitiveGroupItemProvider == null) {
			sensitiveGroupItemProvider = new SensitiveGroupItemProvider(this);
		}

		return sensitiveGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.VariableValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableValueItemProvider variableValueItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.VariableValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableValueAdapter() {
		if (variableValueItemProvider == null) {
			variableValueItemProvider = new VariableValueItemProvider(this);
		}

		return variableValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.SensitiveVariableValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensitiveVariableValueItemProvider sensitiveVariableValueItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.SensitiveVariableValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensitiveVariableValueAdapter() {
		if (sensitiveVariableValueItemProvider == null) {
			sensitiveVariableValueItemProvider = new SensitiveVariableValueItemProvider(this);
		}

		return sensitiveVariableValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.DatasetSize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetSizeItemProvider datasetSizeItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.DatasetSize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatasetSizeAdapter() {
		if (datasetSizeItemProvider == null) {
			datasetSizeItemProvider = new DatasetSizeItemProvider(this);
		}

		return datasetSizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.Logaritm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogaritmItemProvider logaritmItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.Logaritm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogaritmAdapter() {
		if (logaritmItemProvider == null) {
			logaritmItemProvider = new LogaritmItemProvider(this);
		}

		return logaritmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.Summation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SummationItemProvider summationItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.Summation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSummationAdapter() {
		if (summationItemProvider == null) {
			summationItemProvider = new SummationItemProvider(this);
		}

		return summationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.OtherVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OtherVariableItemProvider otherVariableItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.OtherVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOtherVariableAdapter() {
		if (otherVariableItemProvider == null) {
			otherVariableItemProvider = new OtherVariableItemProvider(this);
		}

		return otherVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.ExistingFairnessMetric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExistingFairnessMetricItemProvider existingFairnessMetricItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.ExistingFairnessMetric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExistingFairnessMetricAdapter() {
		if (existingFairnessMetricItemProvider == null) {
			existingFairnessMetricItemProvider = new ExistingFairnessMetricItemProvider(this);
		}

		return existingFairnessMetricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.Metric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricItemProvider metricItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.Metric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricAdapter() {
		if (metricItemProvider == null) {
			metricItemProvider = new MetricItemProvider(this);
		}

		return metricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.Dataset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetItemProvider datasetItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.Dataset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatasetAdapter() {
		if (datasetItemProvider == null) {
			datasetItemProvider = new DatasetItemProvider(this);
		}

		return datasetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.DatasetSensitiveVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetSensitiveVariableItemProvider datasetSensitiveVariableItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.DatasetSensitiveVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatasetSensitiveVariableAdapter() {
		if (datasetSensitiveVariableItemProvider == null) {
			datasetSensitiveVariableItemProvider = new DatasetSensitiveVariableItemProvider(this);
		}

		return datasetSensitiveVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.DatasetPositiveOutcome} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetPositiveOutcomeItemProvider datasetPositiveOutcomeItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.DatasetPositiveOutcome}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatasetPositiveOutcomeAdapter() {
		if (datasetPositiveOutcomeItemProvider == null) {
			datasetPositiveOutcomeItemProvider = new DatasetPositiveOutcomeItemProvider(this);
		}

		return datasetPositiveOutcomeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.DatasetSensitiveGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetSensitiveGroupItemProvider datasetSensitiveGroupItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.DatasetSensitiveGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatasetSensitiveGroupAdapter() {
		if (datasetSensitiveGroupItemProvider == null) {
			datasetSensitiveGroupItemProvider = new DatasetSensitiveGroupItemProvider(this);
		}

		return datasetSensitiveGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.DatasetSensitiveVariableValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetSensitiveVariableValueItemProvider datasetSensitiveVariableValueItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.DatasetSensitiveVariableValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatasetSensitiveVariableValueAdapter() {
		if (datasetSensitiveVariableValueItemProvider == null) {
			datasetSensitiveVariableValueItemProvider = new DatasetSensitiveVariableValueItemProvider(this);
		}

		return datasetSensitiveVariableValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.SingleOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleOperatorItemProvider singleOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.SingleOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleOperatorAdapter() {
		if (singleOperatorItemProvider == null) {
			singleOperatorItemProvider = new SingleOperatorItemProvider(this);
		}

		return singleOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fairness.RangeOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RangeOperatorItemProvider rangeOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link fairness.RangeOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRangeOperatorAdapter() {
		if (rangeOperatorItemProvider == null) {
			rangeOperatorItemProvider = new RangeOperatorItemProvider(this);
		}

		return rangeOperatorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (operatorComponentItemProvider != null) operatorComponentItemProvider.dispose();
		if (groupAnalysisItemProvider != null) groupAnalysisItemProvider.dispose();
		if (individualAnalysisItemProvider != null) individualAnalysisItemProvider.dispose();
		if (sensitiveVariableItemProvider != null) sensitiveVariableItemProvider.dispose();
		if (probabilityItemProvider != null) probabilityItemProvider.dispose();
		if (expectedValueItemProvider != null) expectedValueItemProvider.dispose();
		if (groupSizeItemProvider != null) groupSizeItemProvider.dispose();
		if (logicalConditionItemProvider != null) logicalConditionItemProvider.dispose();
		if (operationValueItemProvider != null) operationValueItemProvider.dispose();
		if (subLogicalConditionItemProvider != null) subLogicalConditionItemProvider.dispose();
		if (positiveOutcomeItemProvider != null) positiveOutcomeItemProvider.dispose();
		if (groupBiasItemProvider != null) groupBiasItemProvider.dispose();
		if (individualBiasItemProvider != null) individualBiasItemProvider.dispose();
		if (sensitiveGroupItemProvider != null) sensitiveGroupItemProvider.dispose();
		if (variableValueItemProvider != null) variableValueItemProvider.dispose();
		if (sensitiveVariableValueItemProvider != null) sensitiveVariableValueItemProvider.dispose();
		if (datasetSizeItemProvider != null) datasetSizeItemProvider.dispose();
		if (logaritmItemProvider != null) logaritmItemProvider.dispose();
		if (summationItemProvider != null) summationItemProvider.dispose();
		if (otherVariableItemProvider != null) otherVariableItemProvider.dispose();
		if (existingFairnessMetricItemProvider != null) existingFairnessMetricItemProvider.dispose();
		if (metricItemProvider != null) metricItemProvider.dispose();
		if (datasetItemProvider != null) datasetItemProvider.dispose();
		if (datasetSensitiveVariableItemProvider != null) datasetSensitiveVariableItemProvider.dispose();
		if (datasetPositiveOutcomeItemProvider != null) datasetPositiveOutcomeItemProvider.dispose();
		if (datasetSensitiveGroupItemProvider != null) datasetSensitiveGroupItemProvider.dispose();
		if (datasetSensitiveVariableValueItemProvider != null) datasetSensitiveVariableValueItemProvider.dispose();
		if (singleOperatorItemProvider != null) singleOperatorItemProvider.dispose();
		if (rangeOperatorItemProvider != null) rangeOperatorItemProvider.dispose();
	}

}
