// automatically generated by Xtext
grammar org.xtext.example.modness.Modness with org.eclipse.xtext.common.Terminals

import "http://www.example.org/fairness" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GroupBias returns GroupBias:
	'GroupBias'
	name=EString
	'{'
		'definition:' '{'
			'domain:' domain=EString ';'
			'source:' source+=BiasSource ( "," source+=BiasSource)* ';'
			'sensitiveVariables:' '{' sensitiveVariables+=SensitiveVariable ( "," sensitiveVariables+=SensitiveVariable)* '};' 
			'positiveOutcome:' positiveOutcome=PositiveOutcome ';'
			'unprivilegedGroup:' '{' unprivilegedGroup+=SensitiveGroup ( "," unprivilegedGroup+=SensitiveGroup)* '};' 
			'privilegedGroup:' '{' privilegedGroup+=SensitiveGroup ( "," privilegedGroup+=SensitiveGroup)* '};' 
		'};'
		'analysis:' '{' analysis+=GroupAnalysis ( "," analysis+=GroupAnalysis)* '};' 
	'}';









EqualityOperator returns EqualityOperator:
	SingleOperator | RangeOperator;

Function returns Function:
	Operation | Probability | ExpectedValue | GroupSize | DatasetSize | Logaritm | Summation | ExistingGroupFairnessMetric | ExistingIndividualFairnessMetric;





Variable returns Variable:
	SensitiveVariable | OtherVariable;



VariableValue returns VariableValue:
	VariableValue_Impl | DatasetPositiveOutcome | DatasetSensitiveVariableValue;

EString returns ecore::EString:
	STRING | ID;

enum BiasSource returns BiasSource:
				WRONG_ALGORITHM_BEHAVIOUR = 'WRONG_ALGORITHM_BEHAVIOUR' | HUMAN_DISCRIMINATION = 'HUMAN_DISCRIMINATION' | WRONG_MEASUREMENT = 'WRONG_MEASUREMENT' | OMITTED_VARIABLE = 'OMITTED_VARIABLE' | WRONG_SAMPLING = 'WRONG_SAMPLING' | WRONG_AGGREGATION = 'WRONG_AGGREGATION' | WRONG_LINKING = 'WRONG_LINKING' | WRONG_PRESENTATION = 'WRONG_PRESENTATION' | RESULT_RANKING = 'RESULT_RANKING' | WRONG_SYSTEM_EVALUATION = 'WRONG_SYSTEM_EVALUATION' | WRONG_SYSTEM_TARGET_POPULATION = 'WRONG_SYSTEM_TARGET_POPULATION' | CHANGE_IN_TARGET_POPULATION = 'CHANGE_IN_TARGET_POPULATION';

SensitiveVariable returns SensitiveVariable:
	'SensitiveVariable{'
		'name:' name=EString';'
		'values:' sensitiveVariableValue+=SensitiveVariableValue ( "," sensitiveVariableValue+=SensitiveVariableValue)*';' 
	'}';

PositiveOutcome returns PositiveOutcome:
		name=EString
;

SensitiveGroup returns SensitiveGroup:
	'SensitiveGroup'
	'{'
		'name:' name=EString';'
		'sensitiveValue:' sensitiveValue+=[SensitiveVariableValue|EString] ( "," sensitiveValue+=[SensitiveVariableValue|EString])*';'
	'};';

GroupAnalysis returns GroupAnalysis:
	'GroupAnalysis'
	//name=EString
	'{'
		('scope:' scope=EString';')?
		'dataset:' '{' dataset+=Dataset ( "," dataset+=Dataset)* '};' 
		'datasetUnprivilegedGroup:' datasetUnprivilegedGroup+=DatasetSensitiveGroup ( "," datasetUnprivilegedGroup+=DatasetSensitiveGroup)*  
		'datasetPrivilegedGroup:' datasetPrivilegedGroup+=DatasetSensitiveGroup ( "," datasetPrivilegedGroup+=DatasetSensitiveGroup)* 
		'metric:' '{' metric+=Metric ( "," metric+=Metric)* '};' 
	'};';

SensitiveVariableValue returns SensitiveVariableValue:
	name=EString
;

Metric returns Metric:
	'Metric'
	'{'
		'name:' name=EString';'
		'toleranceValue:' toleranceValue=EFloat';'
		'function:' function=Function
		'optimalValue:' operator=EqualityOperator
	'};';

Dataset returns Dataset:
	'Dataset'
	'{'
		'id:' name=EString';'
		('groundTruthLabelName:' groundTruthLabelName=EString';')?
		('predictedLabelName:' predictedLabelName=EString';')?
		'filePath:' filePath=EString';'
		('otherVariable:' '{' otherVariable+=OtherVariable ( "," otherVariable+=OtherVariable)* '};' )?
		'positiveOutcome:' positiveOutcome=DatasetPositiveOutcome
		'datasetSentiveVariable:' '{' datasetSentiveVariable+=DatasetSensitiveVariable ( "," datasetSentiveVariable+=DatasetSensitiveVariable)* '};' 
	'}';

DatasetSensitiveGroup returns DatasetSensitiveGroup:
	'{'
		'id:' name=EString';'
		'mappingGroup:' mappingGroup=[SensitiveGroup|EString]';'
		'sensitiveVariables:' '(' sensitiveVariables+=[DatasetSensitiveVariableValue|EString] ( "," sensitiveVariables+=[DatasetSensitiveVariableValue|EString])* ');' 
	'};';

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

SingleOperator returns SingleOperator:
	'{'
 		'operator:' operator=SingleOperatorParameter';' 
		'value:' value=EFloat';'
	'};'
;

RangeOperator returns RangeOperator:
	'{'
		'operator:' operator=RangeOperatorParameter';'
		'lowerValue:' lowerValue=EFloat';' 
		'greaterValue:' greaterValue=EFloat';'
	'};'
;

enum SingleOperatorParameter returns SingleOperatorParameter:
				EQUAL = 'EQUAL' | GREATER = 'GREATER' | MINOR = 'MINOR' | GREATER_EQUAL = 'GREATER_EQUAL' | MINOR_EQUAL = 'MINOR_EQUAL' | NOT_EQUAL = 'NOT_EQUAL';

enum RangeOperatorParameter returns RangeOperatorParameter:
				IN_INCLUDED = 'IN_INCLUDED' | IN_EXCLUDED = 'IN_EXCLUDED' | IN_LOWER_INCLUDED = 'IN_LOWER_INCLUDED' | IN_GREATER_INCLUDED = 'IN_GREATER_INCLUDED';

Operation returns Operation:
	'Operation'
	//name=EString
	'{'
		'arithmeticOperator:' equalityOperator=ArithmeticOperator';'
		'leftSide:' leftSide=OperatorComponent
		'rightSide:' rightSide=OperatorComponent
	'}';

Probability returns Probability:
	'Probability'
	name=EString
	'{'
		'object' object=LogicalCondition
		('condition' condition=LogicalCondition)?
	'}';

ExpectedValue returns ExpectedValue:
	'ExpectedValue'
	name=EString
	'{'
		'columnName' columnName=EString
		('condition' condition=LogicalCondition)?
	'}';

GroupSize returns GroupSize:
	{GroupSize}
	'GroupSize'
	//name=EString
	'{'
		('variable:' variable=[Variable|EString])?
		('groupCondition:' '{' groupCondition=LogicalCondition '};')?
	'};';

DatasetSize returns DatasetSize:
	{DatasetSize}
	'DatasetSize'
	//name=EString
	;

Logaritm returns Logaritm:
	'Logaritm'
	name=EString
	'{'
		'operatorcomponent' operatorcomponent=OperatorComponent
	'}';

Summation returns Summation:
	'Summation'
	name=EString
	'{'
		'startRange' startRange=OperatorComponent
		'endRange' endRange=OperatorComponent
		'body' body=OperatorComponent
	'}';

ExistingGroupFairnessMetric returns ExistingGroupFairnessMetric:
	'ExistingGroupFairnessMetric'
	//name=EString
	'{'
		'metric:' metric=GroupFairnessMetric';'
	'};'
	;

ExistingIndividualFairnessMetric returns ExistingIndividualFairnessMetric:
	'ExistingIndividualFairnessMetric'
	name=EString
	'{'
		'metric:' metric=IndividualFairnessMetric';'
	'};'
	;

enum ArithmeticOperator returns ArithmeticOperator:
				SUM = 'SUM' | DIFFERENCE = 'DIFFERENCE' | MULTIPLICATION = 'MULTIPLICATION' | RATIO = 'RATIO';

OperatorComponent returns OperatorComponent:
	{OperatorComponent}
//	name=EString
	'{'
		('function:' function=Function)?
		('operationValue:' operationvalue=OperationValue)?
	'};';

OperationValue returns OperationValue:
	'OperationValue'
	'{'
		'value:' value=EFloat';'
	'}';

LogicalCondition returns LogicalCondition:
	{LogicalCondition}
	//'LogicalCondition'
	//name=EString
		('value:' value=[VariableValue|EString])?
		('sensitiveGroup:' sensitivegroup=[DatasetSensitiveGroup|EString])?
		(sublogicalcondition=SubLogicalCondition)?
;

SubLogicalCondition returns SubLogicalCondition:
 	logicalOperator=LogicalOperator
	logicalcondition=LogicalCondition
;

VariableValue_Impl returns VariableValue:
//	name=EString
	'{'
		'operator:' operator=EqualityOperator
		(relativeToDatasetSize?='relativeToDatasetSize')?
	'}';

enum LogicalOperator returns LogicalOperator:
				AND = 'AND' | OR = 'OR';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

DatasetPositiveOutcome returns DatasetPositiveOutcome:
	'{'
		'id:' name=EString';'
		'mappingOutcome:' mappingPositiveOutcome=[PositiveOutcome|EString]';'
		'value:' operator=EqualityOperator
		(relativeToDatasetSize?='relativeToDatasetSize' ';')?
	'};';

DatasetSensitiveVariableValue returns DatasetSensitiveVariableValue:
	'SensitiveVariableValue'
	'{'
		'id:' name=EString';'
		'mappingValue:' mappingValue=[SensitiveVariableValue|EString]';'
		'value:' operator=EqualityOperator
		(relativeToDatasetSize?='relativeToDatasetSize'';')?
	'}';

OtherVariable returns OtherVariable:
	{OtherVariable}
	'OtherVariable'
	name=EString
	'{'
		('othervariablevalue' '{' othervariablevalue+=VariableValue ( "," othervariablevalue+=VariableValue)* '}' )?
	'}';

enum GroupFairnessMetric returns GroupFairnessMetric:
				STATISTICAL_PARITY = 'STATISTICAL_PARITY' | DISPARATE_IMPACT = 'DISPARATE_IMPACT' | EQUALIZED_ODDS = 'EQUALIZED_ODDS' | EQUAL_ACCURACY = 'EQUAL_ACCURACY' | FALSE_POSITIVE_DIFFERENCE = 'FALSE_POSITIVE_DIFFERENCE' | TRUE_POSITIVE_DIFFERENCE = 'TRUE_POSITIVE_DIFFERENCE';

enum IndividualFairnessMetric returns IndividualFairnessMetric:
				MANHATTAN_DISTANCE = 'MANHATTAN_DISTANCE' | EUCLIDEAN_DISTANCE = 'EUCLIDEAN_DISTANCE' | MAHALANOBIS_DISTANCE = 'MAHALANOBIS_DISTANCE';

DatasetSensitiveVariable returns DatasetSensitiveVariable:
	'DatasetSensitiveVariable'
	'{'
		'name:' name=EString';'
		'mappingSensitiveVariable:' mappingSensitiveVariable=[SensitiveVariable|EString]';'
		'values:' '{' datasetsensitivevariablevalue+=DatasetSensitiveVariableValue ( "," datasetsensitivevariablevalue+=DatasetSensitiveVariableValue)* '}' 
	'}';
