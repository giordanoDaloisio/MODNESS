/*
 * generated by Xtext 2.35.0.M1
 */
package org.xtext.example.modness.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ModnessGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GroupBiasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.GroupBias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupBiasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDomainKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDomainEStringParserRuleCall_4_0 = (RuleCall)cDomainAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSourceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSourceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSourceBiasSourceEnumRuleCall_7_0 = (RuleCall)cSourceAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSourceAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSourceBiasSourceEnumRuleCall_8_1_0 = (RuleCall)cSourceAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cSensitiveVariablesKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSensitiveVariablesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cSensitiveVariablesSensitiveVariableParserRuleCall_12_0 = (RuleCall)cSensitiveVariablesAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cSensitiveVariablesAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cSensitiveVariablesSensitiveVariableParserRuleCall_13_1_0 = (RuleCall)cSensitiveVariablesAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cPositiveOutcomeKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cPositiveOutcomeAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cPositiveOutcomePositiveOutcomeParserRuleCall_16_0 = (RuleCall)cPositiveOutcomeAssignment_16.eContents().get(0);
		private final Keyword cSemicolonKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cUnprivilegedGroupKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cLeftCurlyBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cUnprivilegedGroupAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cUnprivilegedGroupSensitiveGroupParserRuleCall_20_0 = (RuleCall)cUnprivilegedGroupAssignment_20.eContents().get(0);
		private final Group cGroup_21 = (Group)cGroup.eContents().get(21);
		private final Keyword cCommaKeyword_21_0 = (Keyword)cGroup_21.eContents().get(0);
		private final Assignment cUnprivilegedGroupAssignment_21_1 = (Assignment)cGroup_21.eContents().get(1);
		private final RuleCall cUnprivilegedGroupSensitiveGroupParserRuleCall_21_1_0 = (RuleCall)cUnprivilegedGroupAssignment_21_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Keyword cPrivilegedGroupKeyword_23 = (Keyword)cGroup.eContents().get(23);
		private final Keyword cLeftCurlyBracketKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Assignment cPrivilegedGroupAssignment_25 = (Assignment)cGroup.eContents().get(25);
		private final RuleCall cPrivilegedGroupSensitiveGroupParserRuleCall_25_0 = (RuleCall)cPrivilegedGroupAssignment_25.eContents().get(0);
		private final Group cGroup_26 = (Group)cGroup.eContents().get(26);
		private final Keyword cCommaKeyword_26_0 = (Keyword)cGroup_26.eContents().get(0);
		private final Assignment cPrivilegedGroupAssignment_26_1 = (Assignment)cGroup_26.eContents().get(1);
		private final RuleCall cPrivilegedGroupSensitiveGroupParserRuleCall_26_1_0 = (RuleCall)cPrivilegedGroupAssignment_26_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_27 = (Keyword)cGroup.eContents().get(27);
		private final Keyword cAnalysisKeyword_28 = (Keyword)cGroup.eContents().get(28);
		private final Keyword cLeftCurlyBracketKeyword_29 = (Keyword)cGroup.eContents().get(29);
		private final Assignment cAnalysisAssignment_30 = (Assignment)cGroup.eContents().get(30);
		private final RuleCall cAnalysisGroupAnalysisParserRuleCall_30_0 = (RuleCall)cAnalysisAssignment_30.eContents().get(0);
		private final Group cGroup_31 = (Group)cGroup.eContents().get(31);
		private final Keyword cCommaKeyword_31_0 = (Keyword)cGroup_31.eContents().get(0);
		private final Assignment cAnalysisAssignment_31_1 = (Assignment)cGroup_31.eContents().get(1);
		private final RuleCall cAnalysisGroupAnalysisParserRuleCall_31_1_0 = (RuleCall)cAnalysisAssignment_31_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_32 = (Keyword)cGroup.eContents().get(32);
		private final Keyword cRightCurlyBracketKeyword_33 = (Keyword)cGroup.eContents().get(33);
		
		//GroupBias returns GroupBias:
		//    'GroupBias'
		//    name=EString
		//    '{'
		//        'domain:' domain=EString ';'
		//        'source:' source+=BiasSource ( "," source+=BiasSource)* ';'
		//        'sensitiveVariables:' '{' sensitiveVariables+=SensitiveVariable ( "," sensitiveVariables+=SensitiveVariable)* '};'
		//        'positiveOutcome:' positiveOutcome=PositiveOutcome ';'
		//        'unprivilegedGroup:' '{' unprivilegedGroup+=SensitiveGroup ( "," unprivilegedGroup+=SensitiveGroup)* '};'
		//        'privilegedGroup:' '{' privilegedGroup+=SensitiveGroup ( "," privilegedGroup+=SensitiveGroup)* '};'
		//        'analysis:' '{' analysis+=GroupAnalysis ( "," analysis+=GroupAnalysis)* '};'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'GroupBias'
		//name=EString
		//'{'
		//    'domain:' domain=EString ';'
		//    'source:' source+=BiasSource ( "," source+=BiasSource)* ';'
		//    'sensitiveVariables:' '{' sensitiveVariables+=SensitiveVariable ( "," sensitiveVariables+=SensitiveVariable)* '};'
		//    'positiveOutcome:' positiveOutcome=PositiveOutcome ';'
		//    'unprivilegedGroup:' '{' unprivilegedGroup+=SensitiveGroup ( "," unprivilegedGroup+=SensitiveGroup)* '};'
		//    'privilegedGroup:' '{' privilegedGroup+=SensitiveGroup ( "," privilegedGroup+=SensitiveGroup)* '};'
		//    'analysis:' '{' analysis+=GroupAnalysis ( "," analysis+=GroupAnalysis)* '};'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'GroupBias'
		public Keyword getGroupBiasKeyword_0() { return cGroupBiasKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'domain:'
		public Keyword getDomainKeyword_3() { return cDomainKeyword_3; }
		
		//domain=EString
		public Assignment getDomainAssignment_4() { return cDomainAssignment_4; }
		
		//EString
		public RuleCall getDomainEStringParserRuleCall_4_0() { return cDomainEStringParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//'source:'
		public Keyword getSourceKeyword_6() { return cSourceKeyword_6; }
		
		//source+=BiasSource
		public Assignment getSourceAssignment_7() { return cSourceAssignment_7; }
		
		//BiasSource
		public RuleCall getSourceBiasSourceEnumRuleCall_7_0() { return cSourceBiasSourceEnumRuleCall_7_0; }
		
		//( "," source+=BiasSource)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//source+=BiasSource
		public Assignment getSourceAssignment_8_1() { return cSourceAssignment_8_1; }
		
		//BiasSource
		public RuleCall getSourceBiasSourceEnumRuleCall_8_1_0() { return cSourceBiasSourceEnumRuleCall_8_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
		
		//'sensitiveVariables:'
		public Keyword getSensitiveVariablesKeyword_10() { return cSensitiveVariablesKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//sensitiveVariables+=SensitiveVariable
		public Assignment getSensitiveVariablesAssignment_12() { return cSensitiveVariablesAssignment_12; }
		
		//SensitiveVariable
		public RuleCall getSensitiveVariablesSensitiveVariableParserRuleCall_12_0() { return cSensitiveVariablesSensitiveVariableParserRuleCall_12_0; }
		
		//( "," sensitiveVariables+=SensitiveVariable)*
		public Group getGroup_13() { return cGroup_13; }
		
		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//sensitiveVariables+=SensitiveVariable
		public Assignment getSensitiveVariablesAssignment_13_1() { return cSensitiveVariablesAssignment_13_1; }
		
		//SensitiveVariable
		public RuleCall getSensitiveVariablesSensitiveVariableParserRuleCall_13_1_0() { return cSensitiveVariablesSensitiveVariableParserRuleCall_13_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_14() { return cRightCurlyBracketSemicolonKeyword_14; }
		
		//'positiveOutcome:'
		public Keyword getPositiveOutcomeKeyword_15() { return cPositiveOutcomeKeyword_15; }
		
		//positiveOutcome=PositiveOutcome
		public Assignment getPositiveOutcomeAssignment_16() { return cPositiveOutcomeAssignment_16; }
		
		//PositiveOutcome
		public RuleCall getPositiveOutcomePositiveOutcomeParserRuleCall_16_0() { return cPositiveOutcomePositiveOutcomeParserRuleCall_16_0; }
		
		//';'
		public Keyword getSemicolonKeyword_17() { return cSemicolonKeyword_17; }
		
		//'unprivilegedGroup:'
		public Keyword getUnprivilegedGroupKeyword_18() { return cUnprivilegedGroupKeyword_18; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_19() { return cLeftCurlyBracketKeyword_19; }
		
		//unprivilegedGroup+=SensitiveGroup
		public Assignment getUnprivilegedGroupAssignment_20() { return cUnprivilegedGroupAssignment_20; }
		
		//SensitiveGroup
		public RuleCall getUnprivilegedGroupSensitiveGroupParserRuleCall_20_0() { return cUnprivilegedGroupSensitiveGroupParserRuleCall_20_0; }
		
		//( "," unprivilegedGroup+=SensitiveGroup)*
		public Group getGroup_21() { return cGroup_21; }
		
		//","
		public Keyword getCommaKeyword_21_0() { return cCommaKeyword_21_0; }
		
		//unprivilegedGroup+=SensitiveGroup
		public Assignment getUnprivilegedGroupAssignment_21_1() { return cUnprivilegedGroupAssignment_21_1; }
		
		//SensitiveGroup
		public RuleCall getUnprivilegedGroupSensitiveGroupParserRuleCall_21_1_0() { return cUnprivilegedGroupSensitiveGroupParserRuleCall_21_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_22() { return cRightCurlyBracketSemicolonKeyword_22; }
		
		//'privilegedGroup:'
		public Keyword getPrivilegedGroupKeyword_23() { return cPrivilegedGroupKeyword_23; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_24() { return cLeftCurlyBracketKeyword_24; }
		
		//privilegedGroup+=SensitiveGroup
		public Assignment getPrivilegedGroupAssignment_25() { return cPrivilegedGroupAssignment_25; }
		
		//SensitiveGroup
		public RuleCall getPrivilegedGroupSensitiveGroupParserRuleCall_25_0() { return cPrivilegedGroupSensitiveGroupParserRuleCall_25_0; }
		
		//( "," privilegedGroup+=SensitiveGroup)*
		public Group getGroup_26() { return cGroup_26; }
		
		//","
		public Keyword getCommaKeyword_26_0() { return cCommaKeyword_26_0; }
		
		//privilegedGroup+=SensitiveGroup
		public Assignment getPrivilegedGroupAssignment_26_1() { return cPrivilegedGroupAssignment_26_1; }
		
		//SensitiveGroup
		public RuleCall getPrivilegedGroupSensitiveGroupParserRuleCall_26_1_0() { return cPrivilegedGroupSensitiveGroupParserRuleCall_26_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_27() { return cRightCurlyBracketSemicolonKeyword_27; }
		
		//'analysis:'
		public Keyword getAnalysisKeyword_28() { return cAnalysisKeyword_28; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_29() { return cLeftCurlyBracketKeyword_29; }
		
		//analysis+=GroupAnalysis
		public Assignment getAnalysisAssignment_30() { return cAnalysisAssignment_30; }
		
		//GroupAnalysis
		public RuleCall getAnalysisGroupAnalysisParserRuleCall_30_0() { return cAnalysisGroupAnalysisParserRuleCall_30_0; }
		
		//( "," analysis+=GroupAnalysis)*
		public Group getGroup_31() { return cGroup_31; }
		
		//","
		public Keyword getCommaKeyword_31_0() { return cCommaKeyword_31_0; }
		
		//analysis+=GroupAnalysis
		public Assignment getAnalysisAssignment_31_1() { return cAnalysisAssignment_31_1; }
		
		//GroupAnalysis
		public RuleCall getAnalysisGroupAnalysisParserRuleCall_31_1_0() { return cAnalysisGroupAnalysisParserRuleCall_31_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_32() { return cRightCurlyBracketSemicolonKeyword_32; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_33() { return cRightCurlyBracketKeyword_33; }
	}
	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRangeOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EqualityOperator returns EqualityOperator:
		//    SingleOperator | RangeOperator;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleOperator | RangeOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleOperator
		public RuleCall getSingleOperatorParserRuleCall_0() { return cSingleOperatorParserRuleCall_0; }
		
		//RangeOperator
		public RuleCall getRangeOperatorParserRuleCall_1() { return cRangeOperatorParserRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProbabilityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpectedValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGroupSizeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDatasetSizeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLogaritmParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSummationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExistingGroupFairnessMetricParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExistingIndividualFairnessMetricParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Function returns Function:
		//    Operation | Probability | ExpectedValue | GroupSize | DatasetSize | Logaritm | Summation | ExistingGroupFairnessMetric | ExistingIndividualFairnessMetric;
		@Override public ParserRule getRule() { return rule; }
		
		//Operation | Probability | ExpectedValue | GroupSize | DatasetSize | Logaritm | Summation | ExistingGroupFairnessMetric | ExistingIndividualFairnessMetric
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_0() { return cOperationParserRuleCall_0; }
		
		//Probability
		public RuleCall getProbabilityParserRuleCall_1() { return cProbabilityParserRuleCall_1; }
		
		//ExpectedValue
		public RuleCall getExpectedValueParserRuleCall_2() { return cExpectedValueParserRuleCall_2; }
		
		//GroupSize
		public RuleCall getGroupSizeParserRuleCall_3() { return cGroupSizeParserRuleCall_3; }
		
		//DatasetSize
		public RuleCall getDatasetSizeParserRuleCall_4() { return cDatasetSizeParserRuleCall_4; }
		
		//Logaritm
		public RuleCall getLogaritmParserRuleCall_5() { return cLogaritmParserRuleCall_5; }
		
		//Summation
		public RuleCall getSummationParserRuleCall_6() { return cSummationParserRuleCall_6; }
		
		//ExistingGroupFairnessMetric
		public RuleCall getExistingGroupFairnessMetricParserRuleCall_7() { return cExistingGroupFairnessMetricParserRuleCall_7; }
		
		//ExistingIndividualFairnessMetric
		public RuleCall getExistingIndividualFairnessMetricParserRuleCall_8() { return cExistingIndividualFairnessMetricParserRuleCall_8; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensitiveVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOtherVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable returns Variable:
		//    SensitiveVariable | OtherVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//SensitiveVariable | OtherVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SensitiveVariable
		public RuleCall getSensitiveVariableParserRuleCall_0() { return cSensitiveVariableParserRuleCall_0; }
		
		//OtherVariable
		public RuleCall getOtherVariableParserRuleCall_1() { return cOtherVariableParserRuleCall_1; }
	}
	public class VariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.VariableValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableValue_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDatasetPositiveOutcomeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDatasetSensitiveVariableValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VariableValue returns VariableValue:
		//    VariableValue_Impl | DatasetPositiveOutcome | DatasetSensitiveVariableValue;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableValue_Impl | DatasetPositiveOutcome | DatasetSensitiveVariableValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableValue_Impl
		public RuleCall getVariableValue_ImplParserRuleCall_0() { return cVariableValue_ImplParserRuleCall_0; }
		
		//DatasetPositiveOutcome
		public RuleCall getDatasetPositiveOutcomeParserRuleCall_1() { return cDatasetPositiveOutcomeParserRuleCall_1; }
		
		//DatasetSensitiveVariableValue
		public RuleCall getDatasetSensitiveVariableValueParserRuleCall_2() { return cDatasetSensitiveVariableValueParserRuleCall_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class SensitiveVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.SensitiveVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensitiveVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cValuesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSensitiveVariableValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSensitiveVariableValueSensitiveVariableValueParserRuleCall_5_0 = (RuleCall)cSensitiveVariableValueAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSensitiveVariableValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSensitiveVariableValueSensitiveVariableValueParserRuleCall_6_1_0 = (RuleCall)cSensitiveVariableValueAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SensitiveVariable returns SensitiveVariable:
		//    'SensitiveVariable{'
		//        'name:' name=EString';'
		//        'values:' sensitiveVariableValue+=SensitiveVariableValue ( "," sensitiveVariableValue+=SensitiveVariableValue)*';'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SensitiveVariable{'
		//    'name:' name=EString';'
		//    'values:' sensitiveVariableValue+=SensitiveVariableValue ( "," sensitiveVariableValue+=SensitiveVariableValue)*';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SensitiveVariable{'
		public Keyword getSensitiveVariableKeyword_0() { return cSensitiveVariableKeyword_0; }
		
		//'name:'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'values:'
		public Keyword getValuesKeyword_4() { return cValuesKeyword_4; }
		
		//sensitiveVariableValue+=SensitiveVariableValue
		public Assignment getSensitiveVariableValueAssignment_5() { return cSensitiveVariableValueAssignment_5; }
		
		//SensitiveVariableValue
		public RuleCall getSensitiveVariableValueSensitiveVariableValueParserRuleCall_5_0() { return cSensitiveVariableValueSensitiveVariableValueParserRuleCall_5_0; }
		
		//( "," sensitiveVariableValue+=SensitiveVariableValue)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//sensitiveVariableValue+=SensitiveVariableValue
		public Assignment getSensitiveVariableValueAssignment_6_1() { return cSensitiveVariableValueAssignment_6_1; }
		
		//SensitiveVariableValue
		public RuleCall getSensitiveVariableValueSensitiveVariableValueParserRuleCall_6_1_0() { return cSensitiveVariableValueSensitiveVariableValueParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class PositiveOutcomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.PositiveOutcome");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PositiveOutcome returns PositiveOutcome:
		//        name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}
	public class SensitiveGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.SensitiveGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensitiveGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSensitiveValueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSensitiveValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSensitiveValueSensitiveVariableValueCrossReference_6_0 = (CrossReference)cSensitiveValueAssignment_6.eContents().get(0);
		private final RuleCall cSensitiveValueSensitiveVariableValueEStringParserRuleCall_6_0_1 = (RuleCall)cSensitiveValueSensitiveVariableValueCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSensitiveValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cSensitiveValueSensitiveVariableValueCrossReference_7_1_0 = (CrossReference)cSensitiveValueAssignment_7_1.eContents().get(0);
		private final RuleCall cSensitiveValueSensitiveVariableValueEStringParserRuleCall_7_1_0_1 = (RuleCall)cSensitiveValueSensitiveVariableValueCrossReference_7_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SensitiveGroup returns SensitiveGroup:
		//    'SensitiveGroup'
		//    '{'
		//        'name:' name=EString';'
		//        'sensitiveValue:' sensitiveValue+=[SensitiveVariableValue|EString] ( "," sensitiveValue+=[SensitiveVariableValue|EString])*';'
		//    '};';
		@Override public ParserRule getRule() { return rule; }
		
		//'SensitiveGroup'
		//'{'
		//    'name:' name=EString';'
		//    'sensitiveValue:' sensitiveValue+=[SensitiveVariableValue|EString] ( "," sensitiveValue+=[SensitiveVariableValue|EString])*';'
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'SensitiveGroup'
		public Keyword getSensitiveGroupKeyword_0() { return cSensitiveGroupKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'sensitiveValue:'
		public Keyword getSensitiveValueKeyword_5() { return cSensitiveValueKeyword_5; }
		
		//sensitiveValue+=[SensitiveVariableValue|EString]
		public Assignment getSensitiveValueAssignment_6() { return cSensitiveValueAssignment_6; }
		
		//[SensitiveVariableValue|EString]
		public CrossReference getSensitiveValueSensitiveVariableValueCrossReference_6_0() { return cSensitiveValueSensitiveVariableValueCrossReference_6_0; }
		
		//EString
		public RuleCall getSensitiveValueSensitiveVariableValueEStringParserRuleCall_6_0_1() { return cSensitiveValueSensitiveVariableValueEStringParserRuleCall_6_0_1; }
		
		//( "," sensitiveValue+=[SensitiveVariableValue|EString])*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//sensitiveValue+=[SensitiveVariableValue|EString]
		public Assignment getSensitiveValueAssignment_7_1() { return cSensitiveValueAssignment_7_1; }
		
		//[SensitiveVariableValue|EString]
		public CrossReference getSensitiveValueSensitiveVariableValueCrossReference_7_1_0() { return cSensitiveValueSensitiveVariableValueCrossReference_7_1_0; }
		
		//EString
		public RuleCall getSensitiveValueSensitiveVariableValueEStringParserRuleCall_7_1_0_1() { return cSensitiveValueSensitiveVariableValueEStringParserRuleCall_7_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_9() { return cRightCurlyBracketSemicolonKeyword_9; }
	}
	public class GroupAnalysisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.GroupAnalysis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupAnalysisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cScopeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScopeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cScopeEStringParserRuleCall_2_1_0 = (RuleCall)cScopeAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cMetricKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMetricAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMetricMetricParserRuleCall_6_0 = (RuleCall)cMetricAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMetricAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMetricMetricParserRuleCall_7_1_0 = (RuleCall)cMetricAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cDatasetKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cDatasetAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cDatasetDatasetParserRuleCall_11_0 = (RuleCall)cDatasetAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cDatasetAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cDatasetDatasetParserRuleCall_12_1_0 = (RuleCall)cDatasetAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cDatasetUnprivilegedGroupKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cDatasetUnprivilegedGroupAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cDatasetUnprivilegedGroupDatasetSensitiveGroupParserRuleCall_15_0 = (RuleCall)cDatasetUnprivilegedGroupAssignment_15.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cCommaKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cDatasetUnprivilegedGroupAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cDatasetUnprivilegedGroupDatasetSensitiveGroupParserRuleCall_16_1_0 = (RuleCall)cDatasetUnprivilegedGroupAssignment_16_1.eContents().get(0);
		private final Keyword cDatasetPrivilegedGroupKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cDatasetPrivilegedGroupAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cDatasetPrivilegedGroupDatasetSensitiveGroupParserRuleCall_18_0 = (RuleCall)cDatasetPrivilegedGroupAssignment_18.eContents().get(0);
		private final Group cGroup_19 = (Group)cGroup.eContents().get(19);
		private final Keyword cCommaKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final Assignment cDatasetPrivilegedGroupAssignment_19_1 = (Assignment)cGroup_19.eContents().get(1);
		private final RuleCall cDatasetPrivilegedGroupDatasetSensitiveGroupParserRuleCall_19_1_0 = (RuleCall)cDatasetPrivilegedGroupAssignment_19_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//GroupAnalysis returns GroupAnalysis:
		//    'GroupAnalysis'
		//    //name=EString
		//    '{'
		//        ('scope:' scope=EString)?';'
		//        'metric:' '{' metric+=Metric ( "," metric+=Metric)* '};'
		//        'dataset:' '{' dataset+=Dataset ( "," dataset+=Dataset)* '};'
		//        'datasetUnprivilegedGroup:' datasetUnprivilegedGroup+=DatasetSensitiveGroup ( "," datasetUnprivilegedGroup+=DatasetSensitiveGroup)*
		//        'datasetPrivilegedGroup:' datasetPrivilegedGroup+=DatasetSensitiveGroup ( "," datasetPrivilegedGroup+=DatasetSensitiveGroup)*
		//    '};';
		@Override public ParserRule getRule() { return rule; }
		
		//'GroupAnalysis'
		////name=EString
		//'{'
		//    ('scope:' scope=EString)?';'
		//    'metric:' '{' metric+=Metric ( "," metric+=Metric)* '};'
		//    'dataset:' '{' dataset+=Dataset ( "," dataset+=Dataset)* '};'
		//    'datasetUnprivilegedGroup:' datasetUnprivilegedGroup+=DatasetSensitiveGroup ( "," datasetUnprivilegedGroup+=DatasetSensitiveGroup)*
		//    'datasetPrivilegedGroup:' datasetPrivilegedGroup+=DatasetSensitiveGroup ( "," datasetPrivilegedGroup+=DatasetSensitiveGroup)*
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'GroupAnalysis'
		public Keyword getGroupAnalysisKeyword_0() { return cGroupAnalysisKeyword_0; }
		
		////name=EString
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('scope:' scope=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'scope:'
		public Keyword getScopeKeyword_2_0() { return cScopeKeyword_2_0; }
		
		//scope=EString
		public Assignment getScopeAssignment_2_1() { return cScopeAssignment_2_1; }
		
		//EString
		public RuleCall getScopeEStringParserRuleCall_2_1_0() { return cScopeEStringParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'metric:'
		public Keyword getMetricKeyword_4() { return cMetricKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//metric+=Metric
		public Assignment getMetricAssignment_6() { return cMetricAssignment_6; }
		
		//Metric
		public RuleCall getMetricMetricParserRuleCall_6_0() { return cMetricMetricParserRuleCall_6_0; }
		
		//( "," metric+=Metric)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//metric+=Metric
		public Assignment getMetricAssignment_7_1() { return cMetricAssignment_7_1; }
		
		//Metric
		public RuleCall getMetricMetricParserRuleCall_7_1_0() { return cMetricMetricParserRuleCall_7_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_8() { return cRightCurlyBracketSemicolonKeyword_8; }
		
		//'dataset:'
		public Keyword getDatasetKeyword_9() { return cDatasetKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//dataset+=Dataset
		public Assignment getDatasetAssignment_11() { return cDatasetAssignment_11; }
		
		//Dataset
		public RuleCall getDatasetDatasetParserRuleCall_11_0() { return cDatasetDatasetParserRuleCall_11_0; }
		
		//( "," dataset+=Dataset)*
		public Group getGroup_12() { return cGroup_12; }
		
		//","
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//dataset+=Dataset
		public Assignment getDatasetAssignment_12_1() { return cDatasetAssignment_12_1; }
		
		//Dataset
		public RuleCall getDatasetDatasetParserRuleCall_12_1_0() { return cDatasetDatasetParserRuleCall_12_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_13() { return cRightCurlyBracketSemicolonKeyword_13; }
		
		//'datasetUnprivilegedGroup:'
		public Keyword getDatasetUnprivilegedGroupKeyword_14() { return cDatasetUnprivilegedGroupKeyword_14; }
		
		//datasetUnprivilegedGroup+=DatasetSensitiveGroup
		public Assignment getDatasetUnprivilegedGroupAssignment_15() { return cDatasetUnprivilegedGroupAssignment_15; }
		
		//DatasetSensitiveGroup
		public RuleCall getDatasetUnprivilegedGroupDatasetSensitiveGroupParserRuleCall_15_0() { return cDatasetUnprivilegedGroupDatasetSensitiveGroupParserRuleCall_15_0; }
		
		//( "," datasetUnprivilegedGroup+=DatasetSensitiveGroup)*
		public Group getGroup_16() { return cGroup_16; }
		
		//","
		public Keyword getCommaKeyword_16_0() { return cCommaKeyword_16_0; }
		
		//datasetUnprivilegedGroup+=DatasetSensitiveGroup
		public Assignment getDatasetUnprivilegedGroupAssignment_16_1() { return cDatasetUnprivilegedGroupAssignment_16_1; }
		
		//DatasetSensitiveGroup
		public RuleCall getDatasetUnprivilegedGroupDatasetSensitiveGroupParserRuleCall_16_1_0() { return cDatasetUnprivilegedGroupDatasetSensitiveGroupParserRuleCall_16_1_0; }
		
		//'datasetPrivilegedGroup:'
		public Keyword getDatasetPrivilegedGroupKeyword_17() { return cDatasetPrivilegedGroupKeyword_17; }
		
		//datasetPrivilegedGroup+=DatasetSensitiveGroup
		public Assignment getDatasetPrivilegedGroupAssignment_18() { return cDatasetPrivilegedGroupAssignment_18; }
		
		//DatasetSensitiveGroup
		public RuleCall getDatasetPrivilegedGroupDatasetSensitiveGroupParserRuleCall_18_0() { return cDatasetPrivilegedGroupDatasetSensitiveGroupParserRuleCall_18_0; }
		
		//( "," datasetPrivilegedGroup+=DatasetSensitiveGroup)*
		public Group getGroup_19() { return cGroup_19; }
		
		//","
		public Keyword getCommaKeyword_19_0() { return cCommaKeyword_19_0; }
		
		//datasetPrivilegedGroup+=DatasetSensitiveGroup
		public Assignment getDatasetPrivilegedGroupAssignment_19_1() { return cDatasetPrivilegedGroupAssignment_19_1; }
		
		//DatasetSensitiveGroup
		public RuleCall getDatasetPrivilegedGroupDatasetSensitiveGroupParserRuleCall_19_1_0() { return cDatasetPrivilegedGroupDatasetSensitiveGroupParserRuleCall_19_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_20() { return cRightCurlyBracketSemicolonKeyword_20; }
	}
	public class SensitiveVariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.SensitiveVariableValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SensitiveVariableValue returns SensitiveVariableValue:
		//    name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}
	public class MetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.Metric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetricKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cToleranceValueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToleranceValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cToleranceValueEFloatParserRuleCall_6_0 = (RuleCall)cToleranceValueAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cOperatorKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOperatorAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_9_0 = (RuleCall)cOperatorAssignment_9.eContents().get(0);
		private final Keyword cFunctionKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cFunctionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cFunctionFunctionParserRuleCall_11_0 = (RuleCall)cFunctionAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Metric returns Metric:
		//    'Metric'
		//    '{'
		//        'name:' name=EString';'
		//        'toleranceValue:' toleranceValue=EFloat';'
		//        'operator:' operator=EqualityOperator
		//        'function:' function=Function
		//    '};';
		@Override public ParserRule getRule() { return rule; }
		
		//'Metric'
		//'{'
		//    'name:' name=EString';'
		//    'toleranceValue:' toleranceValue=EFloat';'
		//    'operator:' operator=EqualityOperator
		//    'function:' function=Function
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'Metric'
		public Keyword getMetricKeyword_0() { return cMetricKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'toleranceValue:'
		public Keyword getToleranceValueKeyword_5() { return cToleranceValueKeyword_5; }
		
		//toleranceValue=EFloat
		public Assignment getToleranceValueAssignment_6() { return cToleranceValueAssignment_6; }
		
		//EFloat
		public RuleCall getToleranceValueEFloatParserRuleCall_6_0() { return cToleranceValueEFloatParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'operator:'
		public Keyword getOperatorKeyword_8() { return cOperatorKeyword_8; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_9() { return cOperatorAssignment_9; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_9_0() { return cOperatorEqualityOperatorParserRuleCall_9_0; }
		
		//'function:'
		public Keyword getFunctionKeyword_10() { return cFunctionKeyword_10; }
		
		//function=Function
		public Assignment getFunctionAssignment_11() { return cFunctionAssignment_11; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_11_0() { return cFunctionFunctionParserRuleCall_11_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_12() { return cRightCurlyBracketSemicolonKeyword_12; }
	}
	public class DatasetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.Dataset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatasetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGroundTruthLabelNameKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGroundTruthLabelNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGroundTruthLabelNameEStringParserRuleCall_5_1_0 = (RuleCall)cGroundTruthLabelNameAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPredictedLabelNameKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPredictedLabelNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPredictedLabelNameEStringParserRuleCall_6_1_0 = (RuleCall)cPredictedLabelNameAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cFilePathKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFilePathAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFilePathEStringParserRuleCall_8_0 = (RuleCall)cFilePathAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cOtherVariableKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cOtherVariableAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cOtherVariableOtherVariableParserRuleCall_10_2_0 = (RuleCall)cOtherVariableAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cOtherVariableAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cOtherVariableOtherVariableParserRuleCall_10_3_1_0 = (RuleCall)cOtherVariableAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cPositiveOutcomeKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cPositiveOutcomeAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPositiveOutcomeDatasetPositiveOutcomeParserRuleCall_12_0 = (RuleCall)cPositiveOutcomeAssignment_12.eContents().get(0);
		private final Keyword cDatasetSentiveVariableKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cDatasetSentiveVariableAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cDatasetSentiveVariableDatasetSensitiveVariableParserRuleCall_15_0 = (RuleCall)cDatasetSentiveVariableAssignment_15.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cCommaKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cDatasetSentiveVariableAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cDatasetSentiveVariableDatasetSensitiveVariableParserRuleCall_16_1_0 = (RuleCall)cDatasetSentiveVariableAssignment_16_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//Dataset returns Dataset:
		//    'Dataset'
		//    '{'
		//        'name:' name=EString';'
		//        ('groundTruthLabelName:' groundTruthLabelName=EString';')?
		//        ('predictedLabelName:' predictedLabelName=EString';')?
		//        'filePath:' filePath=EString';'
		//        ('otherVariable:' '{' otherVariable+=OtherVariable ( "," otherVariable+=OtherVariable)* '};' )?
		//        'positiveOutcome:' positiveOutcome=DatasetPositiveOutcome
		//        'datasetSentiveVariable:' '{' datasetSentiveVariable+=DatasetSensitiveVariable ( "," datasetSentiveVariable+=DatasetSensitiveVariable)* '};'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Dataset'
		//'{'
		//    'name:' name=EString';'
		//    ('groundTruthLabelName:' groundTruthLabelName=EString';')?
		//    ('predictedLabelName:' predictedLabelName=EString';')?
		//    'filePath:' filePath=EString';'
		//    ('otherVariable:' '{' otherVariable+=OtherVariable ( "," otherVariable+=OtherVariable)* '};' )?
		//    'positiveOutcome:' positiveOutcome=DatasetPositiveOutcome
		//    'datasetSentiveVariable:' '{' datasetSentiveVariable+=DatasetSensitiveVariable ( "," datasetSentiveVariable+=DatasetSensitiveVariable)* '};'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Dataset'
		public Keyword getDatasetKeyword_0() { return cDatasetKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//('groundTruthLabelName:' groundTruthLabelName=EString';')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'groundTruthLabelName:'
		public Keyword getGroundTruthLabelNameKeyword_5_0() { return cGroundTruthLabelNameKeyword_5_0; }
		
		//groundTruthLabelName=EString
		public Assignment getGroundTruthLabelNameAssignment_5_1() { return cGroundTruthLabelNameAssignment_5_1; }
		
		//EString
		public RuleCall getGroundTruthLabelNameEStringParserRuleCall_5_1_0() { return cGroundTruthLabelNameEStringParserRuleCall_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }
		
		//('predictedLabelName:' predictedLabelName=EString';')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'predictedLabelName:'
		public Keyword getPredictedLabelNameKeyword_6_0() { return cPredictedLabelNameKeyword_6_0; }
		
		//predictedLabelName=EString
		public Assignment getPredictedLabelNameAssignment_6_1() { return cPredictedLabelNameAssignment_6_1; }
		
		//EString
		public RuleCall getPredictedLabelNameEStringParserRuleCall_6_1_0() { return cPredictedLabelNameEStringParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_2() { return cSemicolonKeyword_6_2; }
		
		//'filePath:'
		public Keyword getFilePathKeyword_7() { return cFilePathKeyword_7; }
		
		//filePath=EString
		public Assignment getFilePathAssignment_8() { return cFilePathAssignment_8; }
		
		//EString
		public RuleCall getFilePathEStringParserRuleCall_8_0() { return cFilePathEStringParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
		
		//('otherVariable:' '{' otherVariable+=OtherVariable ( "," otherVariable+=OtherVariable)* '};' )?
		public Group getGroup_10() { return cGroup_10; }
		
		//'otherVariable:'
		public Keyword getOtherVariableKeyword_10_0() { return cOtherVariableKeyword_10_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }
		
		//otherVariable+=OtherVariable
		public Assignment getOtherVariableAssignment_10_2() { return cOtherVariableAssignment_10_2; }
		
		//OtherVariable
		public RuleCall getOtherVariableOtherVariableParserRuleCall_10_2_0() { return cOtherVariableOtherVariableParserRuleCall_10_2_0; }
		
		//( "," otherVariable+=OtherVariable)*
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }
		
		//otherVariable+=OtherVariable
		public Assignment getOtherVariableAssignment_10_3_1() { return cOtherVariableAssignment_10_3_1; }
		
		//OtherVariable
		public RuleCall getOtherVariableOtherVariableParserRuleCall_10_3_1_0() { return cOtherVariableOtherVariableParserRuleCall_10_3_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_10_4() { return cRightCurlyBracketSemicolonKeyword_10_4; }
		
		//'positiveOutcome:'
		public Keyword getPositiveOutcomeKeyword_11() { return cPositiveOutcomeKeyword_11; }
		
		//positiveOutcome=DatasetPositiveOutcome
		public Assignment getPositiveOutcomeAssignment_12() { return cPositiveOutcomeAssignment_12; }
		
		//DatasetPositiveOutcome
		public RuleCall getPositiveOutcomeDatasetPositiveOutcomeParserRuleCall_12_0() { return cPositiveOutcomeDatasetPositiveOutcomeParserRuleCall_12_0; }
		
		//'datasetSentiveVariable:'
		public Keyword getDatasetSentiveVariableKeyword_13() { return cDatasetSentiveVariableKeyword_13; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_14() { return cLeftCurlyBracketKeyword_14; }
		
		//datasetSentiveVariable+=DatasetSensitiveVariable
		public Assignment getDatasetSentiveVariableAssignment_15() { return cDatasetSentiveVariableAssignment_15; }
		
		//DatasetSensitiveVariable
		public RuleCall getDatasetSentiveVariableDatasetSensitiveVariableParserRuleCall_15_0() { return cDatasetSentiveVariableDatasetSensitiveVariableParserRuleCall_15_0; }
		
		//( "," datasetSentiveVariable+=DatasetSensitiveVariable)*
		public Group getGroup_16() { return cGroup_16; }
		
		//","
		public Keyword getCommaKeyword_16_0() { return cCommaKeyword_16_0; }
		
		//datasetSentiveVariable+=DatasetSensitiveVariable
		public Assignment getDatasetSentiveVariableAssignment_16_1() { return cDatasetSentiveVariableAssignment_16_1; }
		
		//DatasetSensitiveVariable
		public RuleCall getDatasetSentiveVariableDatasetSensitiveVariableParserRuleCall_16_1_0() { return cDatasetSentiveVariableDatasetSensitiveVariableParserRuleCall_16_1_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_17() { return cRightCurlyBracketSemicolonKeyword_17; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class DatasetSensitiveGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.DatasetSensitiveGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMappingGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMappingGroupAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMappingGroupSensitiveGroupCrossReference_2_0 = (CrossReference)cMappingGroupAssignment_2.eContents().get(0);
		private final RuleCall cMappingGroupSensitiveGroupEStringParserRuleCall_2_0_1 = (RuleCall)cMappingGroupSensitiveGroupCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSensitiveVariablesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSensitiveVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSensitiveVariablesDatasetSensitiveVariableValueCrossReference_6_0 = (CrossReference)cSensitiveVariablesAssignment_6.eContents().get(0);
		private final RuleCall cSensitiveVariablesDatasetSensitiveVariableValueEStringParserRuleCall_6_0_1 = (RuleCall)cSensitiveVariablesDatasetSensitiveVariableValueCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSensitiveVariablesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cSensitiveVariablesDatasetSensitiveVariableValueCrossReference_7_1_0 = (CrossReference)cSensitiveVariablesAssignment_7_1.eContents().get(0);
		private final RuleCall cSensitiveVariablesDatasetSensitiveVariableValueEStringParserRuleCall_7_1_0_1 = (RuleCall)cSensitiveVariablesDatasetSensitiveVariableValueCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DatasetSensitiveGroup returns DatasetSensitiveGroup:
		//    '{'
		//        'mappingGroup' mappingGroup=[SensitiveGroup|EString]';'
		//        'sensitiveVariables:' '(' sensitiveVariables+=[DatasetSensitiveVariableValue|EString] ( "," sensitiveVariables+=[DatasetSensitiveVariableValue|EString])* ');'
		//    '};';
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//    'mappingGroup' mappingGroup=[SensitiveGroup|EString]';'
		//    'sensitiveVariables:' '(' sensitiveVariables+=[DatasetSensitiveVariableValue|EString] ( "," sensitiveVariables+=[DatasetSensitiveVariableValue|EString])* ');'
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'mappingGroup'
		public Keyword getMappingGroupKeyword_1() { return cMappingGroupKeyword_1; }
		
		//mappingGroup=[SensitiveGroup|EString]
		public Assignment getMappingGroupAssignment_2() { return cMappingGroupAssignment_2; }
		
		//[SensitiveGroup|EString]
		public CrossReference getMappingGroupSensitiveGroupCrossReference_2_0() { return cMappingGroupSensitiveGroupCrossReference_2_0; }
		
		//EString
		public RuleCall getMappingGroupSensitiveGroupEStringParserRuleCall_2_0_1() { return cMappingGroupSensitiveGroupEStringParserRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'sensitiveVariables:'
		public Keyword getSensitiveVariablesKeyword_4() { return cSensitiveVariablesKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//sensitiveVariables+=[DatasetSensitiveVariableValue|EString]
		public Assignment getSensitiveVariablesAssignment_6() { return cSensitiveVariablesAssignment_6; }
		
		//[DatasetSensitiveVariableValue|EString]
		public CrossReference getSensitiveVariablesDatasetSensitiveVariableValueCrossReference_6_0() { return cSensitiveVariablesDatasetSensitiveVariableValueCrossReference_6_0; }
		
		//EString
		public RuleCall getSensitiveVariablesDatasetSensitiveVariableValueEStringParserRuleCall_6_0_1() { return cSensitiveVariablesDatasetSensitiveVariableValueEStringParserRuleCall_6_0_1; }
		
		//( "," sensitiveVariables+=[DatasetSensitiveVariableValue|EString])*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//sensitiveVariables+=[DatasetSensitiveVariableValue|EString]
		public Assignment getSensitiveVariablesAssignment_7_1() { return cSensitiveVariablesAssignment_7_1; }
		
		//[DatasetSensitiveVariableValue|EString]
		public CrossReference getSensitiveVariablesDatasetSensitiveVariableValueCrossReference_7_1_0() { return cSensitiveVariablesDatasetSensitiveVariableValueCrossReference_7_1_0; }
		
		//EString
		public RuleCall getSensitiveVariablesDatasetSensitiveVariableValueEStringParserRuleCall_7_1_0_1() { return cSensitiveVariablesDatasetSensitiveVariableValueEStringParserRuleCall_7_1_0_1; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_8() { return cRightParenthesisSemicolonKeyword_8; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_9() { return cRightCurlyBracketSemicolonKeyword_9; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class SingleOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.SingleOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorSingleOperatorParameterEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueEFloatParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SingleOperator returns SingleOperator:
		//    '{'
		//         'parameter:' operator=SingleOperatorParameter';'
		//        'value:' value=EFloat';'
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//     'parameter:' operator=SingleOperatorParameter';'
		//    'value:' value=EFloat';'
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'parameter:'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
		
		//operator=SingleOperatorParameter
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//SingleOperatorParameter
		public RuleCall getOperatorSingleOperatorParameterEnumRuleCall_2_0() { return cOperatorSingleOperatorParameterEnumRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'value:'
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }
		
		//value=EFloat
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//EFloat
		public RuleCall getValueEFloatParserRuleCall_5_0() { return cValueEFloatParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}
	public class RangeOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.RangeOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorRangeOperatorParameterEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLowerValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLowerValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLowerValueEFloatParserRuleCall_5_0 = (RuleCall)cLowerValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cGreaterValueKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cGreaterValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGreaterValueEFloatParserRuleCall_8_0 = (RuleCall)cGreaterValueAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//RangeOperator returns RangeOperator:
		//    '{'
		//        'parameter:' operator=RangeOperatorParameter';'
		//        'lowerValue:' lowerValue=EFloat';'
		//        'greaterValue:' greaterValue=EFloat';'
		//    '};'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//    'parameter:' operator=RangeOperatorParameter';'
		//    'lowerValue:' lowerValue=EFloat';'
		//    'greaterValue:' greaterValue=EFloat';'
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'parameter:'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
		
		//operator=RangeOperatorParameter
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//RangeOperatorParameter
		public RuleCall getOperatorRangeOperatorParameterEnumRuleCall_2_0() { return cOperatorRangeOperatorParameterEnumRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'lowerValue:'
		public Keyword getLowerValueKeyword_4() { return cLowerValueKeyword_4; }
		
		//lowerValue=EFloat
		public Assignment getLowerValueAssignment_5() { return cLowerValueAssignment_5; }
		
		//EFloat
		public RuleCall getLowerValueEFloatParserRuleCall_5_0() { return cLowerValueEFloatParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'greaterValue:'
		public Keyword getGreaterValueKeyword_7() { return cGreaterValueKeyword_7; }
		
		//greaterValue=EFloat
		public Assignment getGreaterValueAssignment_8() { return cGreaterValueAssignment_8; }
		
		//EFloat
		public RuleCall getGreaterValueEFloatParserRuleCall_8_0() { return cGreaterValueEFloatParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_10() { return cRightCurlyBracketSemicolonKeyword_10; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualityOperatorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEqualityOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEqualityOperatorArithmeticOperatorEnumRuleCall_4_0 = (RuleCall)cEqualityOperatorAssignment_4.eContents().get(0);
		private final Keyword cLeftSideKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLeftSideAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLeftSideOperatorComponentParserRuleCall_6_0 = (RuleCall)cLeftSideAssignment_6.eContents().get(0);
		private final Keyword cRightSideKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRightSideAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRightSideOperatorComponentParserRuleCall_8_0 = (RuleCall)cRightSideAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Operation returns Operation:
		//    'Operation'
		//    name=EString
		//    '{'
		//        'equalityOperator' equalityOperator=ArithmeticOperator
		//        'leftSide' leftSide=OperatorComponent
		//        'rightSide' rightSide=OperatorComponent
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Operation'
		//name=EString
		//'{'
		//    'equalityOperator' equalityOperator=ArithmeticOperator
		//    'leftSide' leftSide=OperatorComponent
		//    'rightSide' rightSide=OperatorComponent
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'equalityOperator'
		public Keyword getEqualityOperatorKeyword_3() { return cEqualityOperatorKeyword_3; }
		
		//equalityOperator=ArithmeticOperator
		public Assignment getEqualityOperatorAssignment_4() { return cEqualityOperatorAssignment_4; }
		
		//ArithmeticOperator
		public RuleCall getEqualityOperatorArithmeticOperatorEnumRuleCall_4_0() { return cEqualityOperatorArithmeticOperatorEnumRuleCall_4_0; }
		
		//'leftSide'
		public Keyword getLeftSideKeyword_5() { return cLeftSideKeyword_5; }
		
		//leftSide=OperatorComponent
		public Assignment getLeftSideAssignment_6() { return cLeftSideAssignment_6; }
		
		//OperatorComponent
		public RuleCall getLeftSideOperatorComponentParserRuleCall_6_0() { return cLeftSideOperatorComponentParserRuleCall_6_0; }
		
		//'rightSide'
		public Keyword getRightSideKeyword_7() { return cRightSideKeyword_7; }
		
		//rightSide=OperatorComponent
		public Assignment getRightSideAssignment_8() { return cRightSideAssignment_8; }
		
		//OperatorComponent
		public RuleCall getRightSideOperatorComponentParserRuleCall_8_0() { return cRightSideOperatorComponentParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ProbabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.Probability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProbabilityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cObjectKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectLogicalConditionParserRuleCall_4_0 = (RuleCall)cObjectAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConditionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConditionLogicalConditionParserRuleCall_5_1_0 = (RuleCall)cConditionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Probability returns Probability:
		//    'Probability'
		//    name=EString
		//    '{'
		//        'object' object=LogicalCondition
		//        ('condition' condition=LogicalCondition)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Probability'
		//name=EString
		//'{'
		//    'object' object=LogicalCondition
		//    ('condition' condition=LogicalCondition)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Probability'
		public Keyword getProbabilityKeyword_0() { return cProbabilityKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'object'
		public Keyword getObjectKeyword_3() { return cObjectKeyword_3; }
		
		//object=LogicalCondition
		public Assignment getObjectAssignment_4() { return cObjectAssignment_4; }
		
		//LogicalCondition
		public RuleCall getObjectLogicalConditionParserRuleCall_4_0() { return cObjectLogicalConditionParserRuleCall_4_0; }
		
		//('condition' condition=LogicalCondition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'condition'
		public Keyword getConditionKeyword_5_0() { return cConditionKeyword_5_0; }
		
		//condition=LogicalCondition
		public Assignment getConditionAssignment_5_1() { return cConditionAssignment_5_1; }
		
		//LogicalCondition
		public RuleCall getConditionLogicalConditionParserRuleCall_5_1_0() { return cConditionLogicalConditionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ExpectedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.ExpectedValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpectedValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColumnNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnNameEStringParserRuleCall_4_0 = (RuleCall)cColumnNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConditionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConditionLogicalConditionParserRuleCall_5_1_0 = (RuleCall)cConditionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ExpectedValue returns ExpectedValue:
		//    'ExpectedValue'
		//    name=EString
		//    '{'
		//        'columnName' columnName=EString
		//        ('condition' condition=LogicalCondition)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ExpectedValue'
		//name=EString
		//'{'
		//    'columnName' columnName=EString
		//    ('condition' condition=LogicalCondition)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ExpectedValue'
		public Keyword getExpectedValueKeyword_0() { return cExpectedValueKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'columnName'
		public Keyword getColumnNameKeyword_3() { return cColumnNameKeyword_3; }
		
		//columnName=EString
		public Assignment getColumnNameAssignment_4() { return cColumnNameAssignment_4; }
		
		//EString
		public RuleCall getColumnNameEStringParserRuleCall_4_0() { return cColumnNameEStringParserRuleCall_4_0; }
		
		//('condition' condition=LogicalCondition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'condition'
		public Keyword getConditionKeyword_5_0() { return cConditionKeyword_5_0; }
		
		//condition=LogicalCondition
		public Assignment getConditionAssignment_5_1() { return cConditionAssignment_5_1; }
		
		//LogicalCondition
		public RuleCall getConditionLogicalConditionParserRuleCall_5_1_0() { return cConditionLogicalConditionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class GroupSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.GroupSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupSizeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGroupSizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVariableKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariableAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_4_1_0 = (CrossReference)cVariableAssignment_4_1.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_4_1_0_1 = (RuleCall)cVariableVariableCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGroupConditionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGroupConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGroupConditionLogicalConditionParserRuleCall_5_1_0 = (RuleCall)cGroupConditionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GroupSize returns GroupSize:
		//    {GroupSize}
		//    'GroupSize'
		//    name=EString
		//    '{'
		//        ('variable' variable=[Variable|EString])?
		//        ('groupCondition' groupCondition=LogicalCondition)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GroupSize}
		//'GroupSize'
		//name=EString
		//'{'
		//    ('variable' variable=[Variable|EString])?
		//    ('groupCondition' groupCondition=LogicalCondition)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{GroupSize}
		public Action getGroupSizeAction_0() { return cGroupSizeAction_0; }
		
		//'GroupSize'
		public Keyword getGroupSizeKeyword_1() { return cGroupSizeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('variable' variable=[Variable|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'variable'
		public Keyword getVariableKeyword_4_0() { return cVariableKeyword_4_0; }
		
		//variable=[Variable|EString]
		public Assignment getVariableAssignment_4_1() { return cVariableAssignment_4_1; }
		
		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_4_1_0() { return cVariableVariableCrossReference_4_1_0; }
		
		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_4_1_0_1() { return cVariableVariableEStringParserRuleCall_4_1_0_1; }
		
		//('groupCondition' groupCondition=LogicalCondition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'groupCondition'
		public Keyword getGroupConditionKeyword_5_0() { return cGroupConditionKeyword_5_0; }
		
		//groupCondition=LogicalCondition
		public Assignment getGroupConditionAssignment_5_1() { return cGroupConditionAssignment_5_1; }
		
		//LogicalCondition
		public RuleCall getGroupConditionLogicalConditionParserRuleCall_5_1_0() { return cGroupConditionLogicalConditionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DatasetSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.DatasetSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDatasetSizeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDatasetSizeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//DatasetSize returns DatasetSize:
		//    {DatasetSize}
		//    'DatasetSize'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{DatasetSize}
		//'DatasetSize'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{DatasetSize}
		public Action getDatasetSizeAction_0() { return cDatasetSizeAction_0; }
		
		//'DatasetSize'
		public Keyword getDatasetSizeKeyword_1() { return cDatasetSizeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class LogaritmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.Logaritm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogaritmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOperatorcomponentKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperatorcomponentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperatorcomponentOperatorComponentParserRuleCall_4_0 = (RuleCall)cOperatorcomponentAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Logaritm returns Logaritm:
		//    'Logaritm'
		//    name=EString
		//    '{'
		//        'operatorcomponent' operatorcomponent=OperatorComponent
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Logaritm'
		//name=EString
		//'{'
		//    'operatorcomponent' operatorcomponent=OperatorComponent
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Logaritm'
		public Keyword getLogaritmKeyword_0() { return cLogaritmKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'operatorcomponent'
		public Keyword getOperatorcomponentKeyword_3() { return cOperatorcomponentKeyword_3; }
		
		//operatorcomponent=OperatorComponent
		public Assignment getOperatorcomponentAssignment_4() { return cOperatorcomponentAssignment_4; }
		
		//OperatorComponent
		public RuleCall getOperatorcomponentOperatorComponentParserRuleCall_4_0() { return cOperatorcomponentOperatorComponentParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SummationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.Summation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSummationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStartRangeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartRangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartRangeOperatorComponentParserRuleCall_4_0 = (RuleCall)cStartRangeAssignment_4.eContents().get(0);
		private final Keyword cEndRangeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndRangeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndRangeOperatorComponentParserRuleCall_6_0 = (RuleCall)cEndRangeAssignment_6.eContents().get(0);
		private final Keyword cBodyKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyOperatorComponentParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Summation returns Summation:
		//    'Summation'
		//    name=EString
		//    '{'
		//        'startRange' startRange=OperatorComponent
		//        'endRange' endRange=OperatorComponent
		//        'body' body=OperatorComponent
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Summation'
		//name=EString
		//'{'
		//    'startRange' startRange=OperatorComponent
		//    'endRange' endRange=OperatorComponent
		//    'body' body=OperatorComponent
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Summation'
		public Keyword getSummationKeyword_0() { return cSummationKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'startRange'
		public Keyword getStartRangeKeyword_3() { return cStartRangeKeyword_3; }
		
		//startRange=OperatorComponent
		public Assignment getStartRangeAssignment_4() { return cStartRangeAssignment_4; }
		
		//OperatorComponent
		public RuleCall getStartRangeOperatorComponentParserRuleCall_4_0() { return cStartRangeOperatorComponentParserRuleCall_4_0; }
		
		//'endRange'
		public Keyword getEndRangeKeyword_5() { return cEndRangeKeyword_5; }
		
		//endRange=OperatorComponent
		public Assignment getEndRangeAssignment_6() { return cEndRangeAssignment_6; }
		
		//OperatorComponent
		public RuleCall getEndRangeOperatorComponentParserRuleCall_6_0() { return cEndRangeOperatorComponentParserRuleCall_6_0; }
		
		//'body'
		public Keyword getBodyKeyword_7() { return cBodyKeyword_7; }
		
		//body=OperatorComponent
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//OperatorComponent
		public RuleCall getBodyOperatorComponentParserRuleCall_8_0() { return cBodyOperatorComponentParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ExistingGroupFairnessMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.ExistingGroupFairnessMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExistingGroupFairnessMetricKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMetricKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMetricAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetricGroupFairnessMetricEnumRuleCall_3_0 = (RuleCall)cMetricAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExistingGroupFairnessMetric returns ExistingGroupFairnessMetric:
		//    'ExistingGroupFairnessMetric'
		//    //name=EString
		//    '{'
		//        'metric:' metric=GroupFairnessMetric';'
		//    '};'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExistingGroupFairnessMetric'
		////name=EString
		//'{'
		//    'metric:' metric=GroupFairnessMetric';'
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'ExistingGroupFairnessMetric'
		public Keyword getExistingGroupFairnessMetricKeyword_0() { return cExistingGroupFairnessMetricKeyword_0; }
		
		////name=EString
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'metric:'
		public Keyword getMetricKeyword_2() { return cMetricKeyword_2; }
		
		//metric=GroupFairnessMetric
		public Assignment getMetricAssignment_3() { return cMetricAssignment_3; }
		
		//GroupFairnessMetric
		public RuleCall getMetricGroupFairnessMetricEnumRuleCall_3_0() { return cMetricGroupFairnessMetricEnumRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_5() { return cRightCurlyBracketSemicolonKeyword_5; }
	}
	public class ExistingIndividualFairnessMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.ExistingIndividualFairnessMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExistingIndividualFairnessMetricKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMetricKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMetricAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetricIndividualFairnessMetricEnumRuleCall_4_0 = (RuleCall)cMetricAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ExistingIndividualFairnessMetric returns ExistingIndividualFairnessMetric:
		//    'ExistingIndividualFairnessMetric'
		//    name=EString
		//    '{'
		//        'metric:' metric=IndividualFairnessMetric';'
		//    '};'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExistingIndividualFairnessMetric'
		//name=EString
		//'{'
		//    'metric:' metric=IndividualFairnessMetric';'
		//'};'
		public Group getGroup() { return cGroup; }
		
		//'ExistingIndividualFairnessMetric'
		public Keyword getExistingIndividualFairnessMetricKeyword_0() { return cExistingIndividualFairnessMetricKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'metric:'
		public Keyword getMetricKeyword_3() { return cMetricKeyword_3; }
		
		//metric=IndividualFairnessMetric
		public Assignment getMetricAssignment_4() { return cMetricAssignment_4; }
		
		//IndividualFairnessMetric
		public RuleCall getMetricIndividualFairnessMetricEnumRuleCall_4_0() { return cMetricIndividualFairnessMetricEnumRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_6() { return cRightCurlyBracketSemicolonKeyword_6; }
	}
	public class OperatorComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.OperatorComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperatorComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOperatorComponentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFunctionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFunctionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_4_1_0 = (RuleCall)cFunctionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOperationvalueKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOperationvalueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOperationvalueOperationValueParserRuleCall_5_1_0 = (RuleCall)cOperationvalueAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//OperatorComponent returns OperatorComponent:
		//    {OperatorComponent}
		//    'OperatorComponent'
		//    name=EString
		//    '{'
		//        ('function' function=Function)?
		//        ('operationvalue' operationvalue=OperationValue)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{OperatorComponent}
		//'OperatorComponent'
		//name=EString
		//'{'
		//    ('function' function=Function)?
		//    ('operationvalue' operationvalue=OperationValue)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{OperatorComponent}
		public Action getOperatorComponentAction_0() { return cOperatorComponentAction_0; }
		
		//'OperatorComponent'
		public Keyword getOperatorComponentKeyword_1() { return cOperatorComponentKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('function' function=Function)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'function'
		public Keyword getFunctionKeyword_4_0() { return cFunctionKeyword_4_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_4_1() { return cFunctionAssignment_4_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_4_1_0() { return cFunctionFunctionParserRuleCall_4_1_0; }
		
		//('operationvalue' operationvalue=OperationValue)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'operationvalue'
		public Keyword getOperationvalueKeyword_5_0() { return cOperationvalueKeyword_5_0; }
		
		//operationvalue=OperationValue
		public Assignment getOperationvalueAssignment_5_1() { return cOperationvalueAssignment_5_1; }
		
		//OperationValue
		public RuleCall getOperationvalueOperationValueParserRuleCall_5_1_0() { return cOperationvalueOperationValueParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class OperationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.OperationValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEFloatParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationValue returns OperationValue:
		//    'OperationValue'
		//    '{'
		//        'value' value=EFloat
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'OperationValue'
		//'{'
		//    'value' value=EFloat
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'OperationValue'
		public Keyword getOperationValueKeyword_0() { return cOperationValueKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=EFloat
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EFloat
		public RuleCall getValueEFloatParserRuleCall_3_0() { return cValueEFloatParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LogicalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.LogicalCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLogicalConditionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cValueVariableValueCrossReference_4_1_0 = (CrossReference)cValueAssignment_4_1.eContents().get(0);
		private final RuleCall cValueVariableValueEStringParserRuleCall_4_1_0_1 = (RuleCall)cValueVariableValueCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSensitivegroupKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSensitivegroupAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSensitivegroupDatasetSensitiveGroupCrossReference_5_1_0 = (CrossReference)cSensitivegroupAssignment_5_1.eContents().get(0);
		private final RuleCall cSensitivegroupDatasetSensitiveGroupEStringParserRuleCall_5_1_0_1 = (RuleCall)cSensitivegroupDatasetSensitiveGroupCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSublogicalconditionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSublogicalconditionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSublogicalconditionSubLogicalConditionParserRuleCall_6_1_0 = (RuleCall)cSublogicalconditionAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LogicalCondition returns LogicalCondition:
		//    {LogicalCondition}
		//    'LogicalCondition'
		//    name=EString
		//    '{'
		//        ('value' value=[VariableValue|EString])?
		//        ('sensitivegroup' sensitivegroup=[DatasetSensitiveGroup|EString])?
		//        ('sublogicalcondition' sublogicalcondition=SubLogicalCondition)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalCondition}
		//'LogicalCondition'
		//name=EString
		//'{'
		//    ('value' value=[VariableValue|EString])?
		//    ('sensitivegroup' sensitivegroup=[DatasetSensitiveGroup|EString])?
		//    ('sublogicalcondition' sublogicalcondition=SubLogicalCondition)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{LogicalCondition}
		public Action getLogicalConditionAction_0() { return cLogicalConditionAction_0; }
		
		//'LogicalCondition'
		public Keyword getLogicalConditionKeyword_1() { return cLogicalConditionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('value' value=[VariableValue|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'value'
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }
		
		//value=[VariableValue|EString]
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//[VariableValue|EString]
		public CrossReference getValueVariableValueCrossReference_4_1_0() { return cValueVariableValueCrossReference_4_1_0; }
		
		//EString
		public RuleCall getValueVariableValueEStringParserRuleCall_4_1_0_1() { return cValueVariableValueEStringParserRuleCall_4_1_0_1; }
		
		//('sensitivegroup' sensitivegroup=[DatasetSensitiveGroup|EString])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sensitivegroup'
		public Keyword getSensitivegroupKeyword_5_0() { return cSensitivegroupKeyword_5_0; }
		
		//sensitivegroup=[DatasetSensitiveGroup|EString]
		public Assignment getSensitivegroupAssignment_5_1() { return cSensitivegroupAssignment_5_1; }
		
		//[DatasetSensitiveGroup|EString]
		public CrossReference getSensitivegroupDatasetSensitiveGroupCrossReference_5_1_0() { return cSensitivegroupDatasetSensitiveGroupCrossReference_5_1_0; }
		
		//EString
		public RuleCall getSensitivegroupDatasetSensitiveGroupEStringParserRuleCall_5_1_0_1() { return cSensitivegroupDatasetSensitiveGroupEStringParserRuleCall_5_1_0_1; }
		
		//('sublogicalcondition' sublogicalcondition=SubLogicalCondition)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'sublogicalcondition'
		public Keyword getSublogicalconditionKeyword_6_0() { return cSublogicalconditionKeyword_6_0; }
		
		//sublogicalcondition=SubLogicalCondition
		public Assignment getSublogicalconditionAssignment_6_1() { return cSublogicalconditionAssignment_6_1; }
		
		//SubLogicalCondition
		public RuleCall getSublogicalconditionSubLogicalConditionParserRuleCall_6_1_0() { return cSublogicalconditionSubLogicalConditionParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SubLogicalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.SubLogicalCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubLogicalConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLogicalOperatorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLogicalOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLogicalOperatorLogicalOperatorEnumRuleCall_4_0 = (RuleCall)cLogicalOperatorAssignment_4.eContents().get(0);
		private final Keyword cLogicalconditionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLogicalconditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLogicalconditionLogicalConditionParserRuleCall_6_0 = (RuleCall)cLogicalconditionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SubLogicalCondition returns SubLogicalCondition:
		//    'SubLogicalCondition'
		//    name=EString
		//    '{'
		//        'logicalOperator' logicalOperator=LogicalOperator
		//        'logicalcondition' logicalcondition=LogicalCondition
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SubLogicalCondition'
		//name=EString
		//'{'
		//    'logicalOperator' logicalOperator=LogicalOperator
		//    'logicalcondition' logicalcondition=LogicalCondition
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SubLogicalCondition'
		public Keyword getSubLogicalConditionKeyword_0() { return cSubLogicalConditionKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'logicalOperator'
		public Keyword getLogicalOperatorKeyword_3() { return cLogicalOperatorKeyword_3; }
		
		//logicalOperator=LogicalOperator
		public Assignment getLogicalOperatorAssignment_4() { return cLogicalOperatorAssignment_4; }
		
		//LogicalOperator
		public RuleCall getLogicalOperatorLogicalOperatorEnumRuleCall_4_0() { return cLogicalOperatorLogicalOperatorEnumRuleCall_4_0; }
		
		//'logicalcondition'
		public Keyword getLogicalconditionKeyword_5() { return cLogicalconditionKeyword_5; }
		
		//logicalcondition=LogicalCondition
		public Assignment getLogicalconditionAssignment_6() { return cLogicalconditionAssignment_6; }
		
		//LogicalCondition
		public RuleCall getLogicalconditionLogicalConditionParserRuleCall_6_0() { return cLogicalconditionLogicalConditionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class VariableValue_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.VariableValue_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelativeToDatasetSizeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRelativeToDatasetSizeRelativeToDatasetSizeKeyword_0_0 = (Keyword)cRelativeToDatasetSizeAssignment_0.eContents().get(0);
		private final Keyword cVariableValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOperatorKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VariableValue_Impl returns VariableValue:
		//    (relativeToDatasetSize?='relativeToDatasetSize')?
		//    'VariableValue'
		//    name=EString
		//    '{'
		//        'operator' operator=EqualityOperator
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//(relativeToDatasetSize?='relativeToDatasetSize')?
		//'VariableValue'
		//name=EString
		//'{'
		//    'operator' operator=EqualityOperator
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(relativeToDatasetSize?='relativeToDatasetSize')?
		public Assignment getRelativeToDatasetSizeAssignment_0() { return cRelativeToDatasetSizeAssignment_0; }
		
		//'relativeToDatasetSize'
		public Keyword getRelativeToDatasetSizeRelativeToDatasetSizeKeyword_0_0() { return cRelativeToDatasetSizeRelativeToDatasetSizeKeyword_0_0; }
		
		//'VariableValue'
		public Keyword getVariableValueKeyword_1() { return cVariableValueKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'operator'
		public Keyword getOperatorKeyword_4() { return cOperatorKeyword_4; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_5_0() { return cOperatorEqualityOperatorParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class DatasetPositiveOutcomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.DatasetPositiveOutcome");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelativeToDatasetSizeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRelativeToDatasetSizeRelativeToDatasetSizeKeyword_0_0 = (Keyword)cRelativeToDatasetSizeAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOutcomeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMappingPositiveOutcomeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMappingPositiveOutcomePositiveOutcomeCrossReference_3_0 = (CrossReference)cMappingPositiveOutcomeAssignment_3.eContents().get(0);
		private final RuleCall cMappingPositiveOutcomePositiveOutcomeEStringParserRuleCall_3_0_1 = (RuleCall)cMappingPositiveOutcomePositiveOutcomeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DatasetPositiveOutcome returns DatasetPositiveOutcome:
		//    (relativeToDatasetSize?='relativeToDatasetSize')?
		//    //name=EString
		//    '{'
		//        'outcome:' mappingPositiveOutcome=[PositiveOutcome|EString]';'
		//        'value:' operator=EqualityOperator
		//    '};';
		@Override public ParserRule getRule() { return rule; }
		
		//(relativeToDatasetSize?='relativeToDatasetSize')?
		////name=EString
		//'{'
		//    'outcome:' mappingPositiveOutcome=[PositiveOutcome|EString]';'
		//    'value:' operator=EqualityOperator
		//'};'
		public Group getGroup() { return cGroup; }
		
		//(relativeToDatasetSize?='relativeToDatasetSize')?
		public Assignment getRelativeToDatasetSizeAssignment_0() { return cRelativeToDatasetSizeAssignment_0; }
		
		//'relativeToDatasetSize'
		public Keyword getRelativeToDatasetSizeRelativeToDatasetSizeKeyword_0_0() { return cRelativeToDatasetSizeRelativeToDatasetSizeKeyword_0_0; }
		
		////name=EString
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'outcome:'
		public Keyword getOutcomeKeyword_2() { return cOutcomeKeyword_2; }
		
		//mappingPositiveOutcome=[PositiveOutcome|EString]
		public Assignment getMappingPositiveOutcomeAssignment_3() { return cMappingPositiveOutcomeAssignment_3; }
		
		//[PositiveOutcome|EString]
		public CrossReference getMappingPositiveOutcomePositiveOutcomeCrossReference_3_0() { return cMappingPositiveOutcomePositiveOutcomeCrossReference_3_0; }
		
		//EString
		public RuleCall getMappingPositiveOutcomePositiveOutcomeEStringParserRuleCall_3_0_1() { return cMappingPositiveOutcomePositiveOutcomeEStringParserRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'value:'
		public Keyword getValueKeyword_5() { return cValueKeyword_5; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_6_0() { return cOperatorEqualityOperatorParserRuleCall_6_0; }
		
		//'};'
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}
	public class DatasetSensitiveVariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.DatasetSensitiveVariableValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensitiveVariableValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cMappingValueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMappingValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMappingValueSensitiveVariableValueCrossReference_6_0 = (CrossReference)cMappingValueAssignment_6.eContents().get(0);
		private final RuleCall cMappingValueSensitiveVariableValueEStringParserRuleCall_6_0_1 = (RuleCall)cMappingValueSensitiveVariableValueCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cValueKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOperatorAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOperatorEqualityOperatorParserRuleCall_9_0 = (RuleCall)cOperatorAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cRelativeToDatasetSizeAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cRelativeToDatasetSizeRelativeToDatasetSizeKeyword_10_0_0 = (Keyword)cRelativeToDatasetSizeAssignment_10_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//DatasetSensitiveVariableValue returns DatasetSensitiveVariableValue:
		//    'SensitiveVariableValue'
		//    '{'
		//        'id:' name=EString';'
		//        'mappingValue:' mappingValue=[SensitiveVariableValue|EString]';'
		//        'value:' operator=EqualityOperator
		//        (relativeToDatasetSize?='relativeToDatasetSize'';')?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SensitiveVariableValue'
		//'{'
		//    'id:' name=EString';'
		//    'mappingValue:' mappingValue=[SensitiveVariableValue|EString]';'
		//    'value:' operator=EqualityOperator
		//    (relativeToDatasetSize?='relativeToDatasetSize'';')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SensitiveVariableValue'
		public Keyword getSensitiveVariableValueKeyword_0() { return cSensitiveVariableValueKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'id:'
		public Keyword getIdKeyword_2() { return cIdKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'mappingValue:'
		public Keyword getMappingValueKeyword_5() { return cMappingValueKeyword_5; }
		
		//mappingValue=[SensitiveVariableValue|EString]
		public Assignment getMappingValueAssignment_6() { return cMappingValueAssignment_6; }
		
		//[SensitiveVariableValue|EString]
		public CrossReference getMappingValueSensitiveVariableValueCrossReference_6_0() { return cMappingValueSensitiveVariableValueCrossReference_6_0; }
		
		//EString
		public RuleCall getMappingValueSensitiveVariableValueEStringParserRuleCall_6_0_1() { return cMappingValueSensitiveVariableValueEStringParserRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'value:'
		public Keyword getValueKeyword_8() { return cValueKeyword_8; }
		
		//operator=EqualityOperator
		public Assignment getOperatorAssignment_9() { return cOperatorAssignment_9; }
		
		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorParserRuleCall_9_0() { return cOperatorEqualityOperatorParserRuleCall_9_0; }
		
		//(relativeToDatasetSize?='relativeToDatasetSize'';')?
		public Group getGroup_10() { return cGroup_10; }
		
		//relativeToDatasetSize?='relativeToDatasetSize'
		public Assignment getRelativeToDatasetSizeAssignment_10_0() { return cRelativeToDatasetSizeAssignment_10_0; }
		
		//'relativeToDatasetSize'
		public Keyword getRelativeToDatasetSizeRelativeToDatasetSizeKeyword_10_0_0() { return cRelativeToDatasetSizeRelativeToDatasetSizeKeyword_10_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10_1() { return cSemicolonKeyword_10_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class OtherVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.OtherVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOtherVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOtherVariableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOthervariablevalueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOthervariablevalueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOthervariablevalueVariableValueParserRuleCall_4_2_0 = (RuleCall)cOthervariablevalueAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOthervariablevalueAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cOthervariablevalueVariableValueParserRuleCall_4_3_1_0 = (RuleCall)cOthervariablevalueAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OtherVariable returns OtherVariable:
		//    {OtherVariable}
		//    'OtherVariable'
		//    name=EString
		//    '{'
		//        ('othervariablevalue' '{' othervariablevalue+=VariableValue ( "," othervariablevalue+=VariableValue)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{OtherVariable}
		//'OtherVariable'
		//name=EString
		//'{'
		//    ('othervariablevalue' '{' othervariablevalue+=VariableValue ( "," othervariablevalue+=VariableValue)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{OtherVariable}
		public Action getOtherVariableAction_0() { return cOtherVariableAction_0; }
		
		//'OtherVariable'
		public Keyword getOtherVariableKeyword_1() { return cOtherVariableKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('othervariablevalue' '{' othervariablevalue+=VariableValue ( "," othervariablevalue+=VariableValue)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'othervariablevalue'
		public Keyword getOthervariablevalueKeyword_4_0() { return cOthervariablevalueKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//othervariablevalue+=VariableValue
		public Assignment getOthervariablevalueAssignment_4_2() { return cOthervariablevalueAssignment_4_2; }
		
		//VariableValue
		public RuleCall getOthervariablevalueVariableValueParserRuleCall_4_2_0() { return cOthervariablevalueVariableValueParserRuleCall_4_2_0; }
		
		//( "," othervariablevalue+=VariableValue)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//othervariablevalue+=VariableValue
		public Assignment getOthervariablevalueAssignment_4_3_1() { return cOthervariablevalueAssignment_4_3_1; }
		
		//VariableValue
		public RuleCall getOthervariablevalueVariableValueParserRuleCall_4_3_1_0() { return cOthervariablevalueVariableValueParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DatasetSensitiveVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.DatasetSensitiveVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatasetSensitiveVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cMappingSensitiveVariableKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMappingSensitiveVariableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMappingSensitiveVariableSensitiveVariableCrossReference_6_0 = (CrossReference)cMappingSensitiveVariableAssignment_6.eContents().get(0);
		private final RuleCall cMappingSensitiveVariableSensitiveVariableEStringParserRuleCall_6_0_1 = (RuleCall)cMappingSensitiveVariableSensitiveVariableCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cValuesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDatasetsensitivevariablevalueAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDatasetsensitivevariablevalueDatasetSensitiveVariableValueParserRuleCall_10_0 = (RuleCall)cDatasetsensitivevariablevalueAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cDatasetsensitivevariablevalueAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cDatasetsensitivevariablevalueDatasetSensitiveVariableValueParserRuleCall_11_1_0 = (RuleCall)cDatasetsensitivevariablevalueAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//DatasetSensitiveVariable returns DatasetSensitiveVariable:
		//    'DatasetSensitiveVariable'
		//    '{'
		//        'name:' name=EString';'
		//        'mappingSensitiveVariable:' mappingSensitiveVariable=[SensitiveVariable|EString]';'
		//        'values:' '{' datasetsensitivevariablevalue+=DatasetSensitiveVariableValue ( "," datasetsensitivevariablevalue+=DatasetSensitiveVariableValue)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DatasetSensitiveVariable'
		//'{'
		//    'name:' name=EString';'
		//    'mappingSensitiveVariable:' mappingSensitiveVariable=[SensitiveVariable|EString]';'
		//    'values:' '{' datasetsensitivevariablevalue+=DatasetSensitiveVariableValue ( "," datasetsensitivevariablevalue+=DatasetSensitiveVariableValue)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DatasetSensitiveVariable'
		public Keyword getDatasetSensitiveVariableKeyword_0() { return cDatasetSensitiveVariableKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'mappingSensitiveVariable:'
		public Keyword getMappingSensitiveVariableKeyword_5() { return cMappingSensitiveVariableKeyword_5; }
		
		//mappingSensitiveVariable=[SensitiveVariable|EString]
		public Assignment getMappingSensitiveVariableAssignment_6() { return cMappingSensitiveVariableAssignment_6; }
		
		//[SensitiveVariable|EString]
		public CrossReference getMappingSensitiveVariableSensitiveVariableCrossReference_6_0() { return cMappingSensitiveVariableSensitiveVariableCrossReference_6_0; }
		
		//EString
		public RuleCall getMappingSensitiveVariableSensitiveVariableEStringParserRuleCall_6_0_1() { return cMappingSensitiveVariableSensitiveVariableEStringParserRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'values:'
		public Keyword getValuesKeyword_8() { return cValuesKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//datasetsensitivevariablevalue+=DatasetSensitiveVariableValue
		public Assignment getDatasetsensitivevariablevalueAssignment_10() { return cDatasetsensitivevariablevalueAssignment_10; }
		
		//DatasetSensitiveVariableValue
		public RuleCall getDatasetsensitivevariablevalueDatasetSensitiveVariableValueParserRuleCall_10_0() { return cDatasetsensitivevariablevalueDatasetSensitiveVariableValueParserRuleCall_10_0; }
		
		//( "," datasetsensitivevariablevalue+=DatasetSensitiveVariableValue)*
		public Group getGroup_11() { return cGroup_11; }
		
		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//datasetsensitivevariablevalue+=DatasetSensitiveVariableValue
		public Assignment getDatasetsensitivevariablevalueAssignment_11_1() { return cDatasetsensitivevariablevalueAssignment_11_1; }
		
		//DatasetSensitiveVariableValue
		public RuleCall getDatasetsensitivevariablevalueDatasetSensitiveVariableValueParserRuleCall_11_1_0() { return cDatasetsensitivevariablevalueDatasetSensitiveVariableValueParserRuleCall_11_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	
	public class BiasSourceElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.BiasSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWRONG_ALGORITHM_BEHAVIOUREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWRONG_ALGORITHM_BEHAVIOURWRONG_ALGORITHM_BEHAVIOURKeyword_0_0 = (Keyword)cWRONG_ALGORITHM_BEHAVIOUREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHUMAN_DISCRIMINATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHUMAN_DISCRIMINATIONHUMAN_DISCRIMINATIONKeyword_1_0 = (Keyword)cHUMAN_DISCRIMINATIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWRONG_MEASUREMENTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWRONG_MEASUREMENTWRONG_MEASUREMENTKeyword_2_0 = (Keyword)cWRONG_MEASUREMENTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOMITTED_VARIABLEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOMITTED_VARIABLEOMITTED_VARIABLEKeyword_3_0 = (Keyword)cOMITTED_VARIABLEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWRONG_SAMPLINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWRONG_SAMPLINGWRONG_SAMPLINGKeyword_4_0 = (Keyword)cWRONG_SAMPLINGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cWRONG_AGGREGATIONEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cWRONG_AGGREGATIONWRONG_AGGREGATIONKeyword_5_0 = (Keyword)cWRONG_AGGREGATIONEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWRONG_LINKINGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWRONG_LINKINGWRONG_LINKINGKeyword_6_0 = (Keyword)cWRONG_LINKINGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cWRONG_PRESENTATIONEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cWRONG_PRESENTATIONWRONG_PRESENTATIONKeyword_7_0 = (Keyword)cWRONG_PRESENTATIONEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cRESULT_RANKINGEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cRESULT_RANKINGRESULT_RANKINGKeyword_8_0 = (Keyword)cRESULT_RANKINGEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cWRONG_SYSTEM_EVALUATIONEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cWRONG_SYSTEM_EVALUATIONWRONG_SYSTEM_EVALUATIONKeyword_9_0 = (Keyword)cWRONG_SYSTEM_EVALUATIONEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cWRONG_SYSTEM_TARGET_POPULATIONEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cWRONG_SYSTEM_TARGET_POPULATIONWRONG_SYSTEM_TARGET_POPULATIONKeyword_10_0 = (Keyword)cWRONG_SYSTEM_TARGET_POPULATIONEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cCHANGE_IN_TARGET_POPULATIONEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cCHANGE_IN_TARGET_POPULATIONCHANGE_IN_TARGET_POPULATIONKeyword_11_0 = (Keyword)cCHANGE_IN_TARGET_POPULATIONEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum BiasSource returns BiasSource:
		//                WRONG_ALGORITHM_BEHAVIOUR = 'WRONG_ALGORITHM_BEHAVIOUR' | HUMAN_DISCRIMINATION = 'HUMAN_DISCRIMINATION' | WRONG_MEASUREMENT = 'WRONG_MEASUREMENT' | OMITTED_VARIABLE = 'OMITTED_VARIABLE' | WRONG_SAMPLING = 'WRONG_SAMPLING' | WRONG_AGGREGATION = 'WRONG_AGGREGATION' | WRONG_LINKING = 'WRONG_LINKING' | WRONG_PRESENTATION = 'WRONG_PRESENTATION' | RESULT_RANKING = 'RESULT_RANKING' | WRONG_SYSTEM_EVALUATION = 'WRONG_SYSTEM_EVALUATION' | WRONG_SYSTEM_TARGET_POPULATION = 'WRONG_SYSTEM_TARGET_POPULATION' | CHANGE_IN_TARGET_POPULATION = 'CHANGE_IN_TARGET_POPULATION';
		public EnumRule getRule() { return rule; }
		
		//WRONG_ALGORITHM_BEHAVIOUR = 'WRONG_ALGORITHM_BEHAVIOUR' | HUMAN_DISCRIMINATION = 'HUMAN_DISCRIMINATION' | WRONG_MEASUREMENT = 'WRONG_MEASUREMENT' | OMITTED_VARIABLE = 'OMITTED_VARIABLE' | WRONG_SAMPLING = 'WRONG_SAMPLING' | WRONG_AGGREGATION = 'WRONG_AGGREGATION' | WRONG_LINKING = 'WRONG_LINKING' | WRONG_PRESENTATION = 'WRONG_PRESENTATION' | RESULT_RANKING = 'RESULT_RANKING' | WRONG_SYSTEM_EVALUATION = 'WRONG_SYSTEM_EVALUATION' | WRONG_SYSTEM_TARGET_POPULATION = 'WRONG_SYSTEM_TARGET_POPULATION' | CHANGE_IN_TARGET_POPULATION = 'CHANGE_IN_TARGET_POPULATION'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WRONG_ALGORITHM_BEHAVIOUR = 'WRONG_ALGORITHM_BEHAVIOUR'
		public EnumLiteralDeclaration getWRONG_ALGORITHM_BEHAVIOUREnumLiteralDeclaration_0() { return cWRONG_ALGORITHM_BEHAVIOUREnumLiteralDeclaration_0; }
		
		//'WRONG_ALGORITHM_BEHAVIOUR'
		public Keyword getWRONG_ALGORITHM_BEHAVIOURWRONG_ALGORITHM_BEHAVIOURKeyword_0_0() { return cWRONG_ALGORITHM_BEHAVIOURWRONG_ALGORITHM_BEHAVIOURKeyword_0_0; }
		
		//HUMAN_DISCRIMINATION = 'HUMAN_DISCRIMINATION'
		public EnumLiteralDeclaration getHUMAN_DISCRIMINATIONEnumLiteralDeclaration_1() { return cHUMAN_DISCRIMINATIONEnumLiteralDeclaration_1; }
		
		//'HUMAN_DISCRIMINATION'
		public Keyword getHUMAN_DISCRIMINATIONHUMAN_DISCRIMINATIONKeyword_1_0() { return cHUMAN_DISCRIMINATIONHUMAN_DISCRIMINATIONKeyword_1_0; }
		
		//WRONG_MEASUREMENT = 'WRONG_MEASUREMENT'
		public EnumLiteralDeclaration getWRONG_MEASUREMENTEnumLiteralDeclaration_2() { return cWRONG_MEASUREMENTEnumLiteralDeclaration_2; }
		
		//'WRONG_MEASUREMENT'
		public Keyword getWRONG_MEASUREMENTWRONG_MEASUREMENTKeyword_2_0() { return cWRONG_MEASUREMENTWRONG_MEASUREMENTKeyword_2_0; }
		
		//OMITTED_VARIABLE = 'OMITTED_VARIABLE'
		public EnumLiteralDeclaration getOMITTED_VARIABLEEnumLiteralDeclaration_3() { return cOMITTED_VARIABLEEnumLiteralDeclaration_3; }
		
		//'OMITTED_VARIABLE'
		public Keyword getOMITTED_VARIABLEOMITTED_VARIABLEKeyword_3_0() { return cOMITTED_VARIABLEOMITTED_VARIABLEKeyword_3_0; }
		
		//WRONG_SAMPLING = 'WRONG_SAMPLING'
		public EnumLiteralDeclaration getWRONG_SAMPLINGEnumLiteralDeclaration_4() { return cWRONG_SAMPLINGEnumLiteralDeclaration_4; }
		
		//'WRONG_SAMPLING'
		public Keyword getWRONG_SAMPLINGWRONG_SAMPLINGKeyword_4_0() { return cWRONG_SAMPLINGWRONG_SAMPLINGKeyword_4_0; }
		
		//WRONG_AGGREGATION = 'WRONG_AGGREGATION'
		public EnumLiteralDeclaration getWRONG_AGGREGATIONEnumLiteralDeclaration_5() { return cWRONG_AGGREGATIONEnumLiteralDeclaration_5; }
		
		//'WRONG_AGGREGATION'
		public Keyword getWRONG_AGGREGATIONWRONG_AGGREGATIONKeyword_5_0() { return cWRONG_AGGREGATIONWRONG_AGGREGATIONKeyword_5_0; }
		
		//WRONG_LINKING = 'WRONG_LINKING'
		public EnumLiteralDeclaration getWRONG_LINKINGEnumLiteralDeclaration_6() { return cWRONG_LINKINGEnumLiteralDeclaration_6; }
		
		//'WRONG_LINKING'
		public Keyword getWRONG_LINKINGWRONG_LINKINGKeyword_6_0() { return cWRONG_LINKINGWRONG_LINKINGKeyword_6_0; }
		
		//WRONG_PRESENTATION = 'WRONG_PRESENTATION'
		public EnumLiteralDeclaration getWRONG_PRESENTATIONEnumLiteralDeclaration_7() { return cWRONG_PRESENTATIONEnumLiteralDeclaration_7; }
		
		//'WRONG_PRESENTATION'
		public Keyword getWRONG_PRESENTATIONWRONG_PRESENTATIONKeyword_7_0() { return cWRONG_PRESENTATIONWRONG_PRESENTATIONKeyword_7_0; }
		
		//RESULT_RANKING = 'RESULT_RANKING'
		public EnumLiteralDeclaration getRESULT_RANKINGEnumLiteralDeclaration_8() { return cRESULT_RANKINGEnumLiteralDeclaration_8; }
		
		//'RESULT_RANKING'
		public Keyword getRESULT_RANKINGRESULT_RANKINGKeyword_8_0() { return cRESULT_RANKINGRESULT_RANKINGKeyword_8_0; }
		
		//WRONG_SYSTEM_EVALUATION = 'WRONG_SYSTEM_EVALUATION'
		public EnumLiteralDeclaration getWRONG_SYSTEM_EVALUATIONEnumLiteralDeclaration_9() { return cWRONG_SYSTEM_EVALUATIONEnumLiteralDeclaration_9; }
		
		//'WRONG_SYSTEM_EVALUATION'
		public Keyword getWRONG_SYSTEM_EVALUATIONWRONG_SYSTEM_EVALUATIONKeyword_9_0() { return cWRONG_SYSTEM_EVALUATIONWRONG_SYSTEM_EVALUATIONKeyword_9_0; }
		
		//WRONG_SYSTEM_TARGET_POPULATION = 'WRONG_SYSTEM_TARGET_POPULATION'
		public EnumLiteralDeclaration getWRONG_SYSTEM_TARGET_POPULATIONEnumLiteralDeclaration_10() { return cWRONG_SYSTEM_TARGET_POPULATIONEnumLiteralDeclaration_10; }
		
		//'WRONG_SYSTEM_TARGET_POPULATION'
		public Keyword getWRONG_SYSTEM_TARGET_POPULATIONWRONG_SYSTEM_TARGET_POPULATIONKeyword_10_0() { return cWRONG_SYSTEM_TARGET_POPULATIONWRONG_SYSTEM_TARGET_POPULATIONKeyword_10_0; }
		
		//CHANGE_IN_TARGET_POPULATION = 'CHANGE_IN_TARGET_POPULATION'
		public EnumLiteralDeclaration getCHANGE_IN_TARGET_POPULATIONEnumLiteralDeclaration_11() { return cCHANGE_IN_TARGET_POPULATIONEnumLiteralDeclaration_11; }
		
		//'CHANGE_IN_TARGET_POPULATION'
		public Keyword getCHANGE_IN_TARGET_POPULATIONCHANGE_IN_TARGET_POPULATIONKeyword_11_0() { return cCHANGE_IN_TARGET_POPULATIONCHANGE_IN_TARGET_POPULATIONKeyword_11_0; }
	}
	public class SingleOperatorParameterElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.SingleOperatorParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEQUALKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGREATERKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINORMINORKeyword_2_0 = (Keyword)cMINOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQUALGREATER_EQUALKeyword_3_0 = (Keyword)cGREATER_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMINOR_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMINOR_EQUALMINOR_EQUALKeyword_4_0 = (Keyword)cMINOR_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNOT_EQUALNOT_EQUALKeyword_5_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum SingleOperatorParameter returns SingleOperatorParameter:
		//                EQUAL = 'EQUAL' | GREATER = 'GREATER' | MINOR = 'MINOR' | GREATER_EQUAL = 'GREATER_EQUAL' | MINOR_EQUAL = 'MINOR_EQUAL' | NOT_EQUAL = 'NOT_EQUAL';
		public EnumRule getRule() { return rule; }
		
		//EQUAL = 'EQUAL' | GREATER = 'GREATER' | MINOR = 'MINOR' | GREATER_EQUAL = 'GREATER_EQUAL' | MINOR_EQUAL = 'MINOR_EQUAL' | NOT_EQUAL = 'NOT_EQUAL'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL = 'EQUAL'
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'EQUAL'
		public Keyword getEQUALEQUALKeyword_0_0() { return cEQUALEQUALKeyword_0_0; }
		
		//GREATER = 'GREATER'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//'GREATER'
		public Keyword getGREATERGREATERKeyword_1_0() { return cGREATERGREATERKeyword_1_0; }
		
		//MINOR = 'MINOR'
		public EnumLiteralDeclaration getMINOREnumLiteralDeclaration_2() { return cMINOREnumLiteralDeclaration_2; }
		
		//'MINOR'
		public Keyword getMINORMINORKeyword_2_0() { return cMINORMINORKeyword_2_0; }
		
		//GREATER_EQUAL = 'GREATER_EQUAL'
		public EnumLiteralDeclaration getGREATER_EQUALEnumLiteralDeclaration_3() { return cGREATER_EQUALEnumLiteralDeclaration_3; }
		
		//'GREATER_EQUAL'
		public Keyword getGREATER_EQUALGREATER_EQUALKeyword_3_0() { return cGREATER_EQUALGREATER_EQUALKeyword_3_0; }
		
		//MINOR_EQUAL = 'MINOR_EQUAL'
		public EnumLiteralDeclaration getMINOR_EQUALEnumLiteralDeclaration_4() { return cMINOR_EQUALEnumLiteralDeclaration_4; }
		
		//'MINOR_EQUAL'
		public Keyword getMINOR_EQUALMINOR_EQUALKeyword_4_0() { return cMINOR_EQUALMINOR_EQUALKeyword_4_0; }
		
		//NOT_EQUAL = 'NOT_EQUAL'
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_5() { return cNOT_EQUALEnumLiteralDeclaration_5; }
		
		//'NOT_EQUAL'
		public Keyword getNOT_EQUALNOT_EQUALKeyword_5_0() { return cNOT_EQUALNOT_EQUALKeyword_5_0; }
	}
	public class RangeOperatorParameterElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.RangeOperatorParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIN_INCLUDEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIN_INCLUDEDIN_INCLUDEDKeyword_0_0 = (Keyword)cIN_INCLUDEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIN_EXCLUDEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIN_EXCLUDEDIN_EXCLUDEDKeyword_1_0 = (Keyword)cIN_EXCLUDEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIN_LOWER_INCLUDEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIN_LOWER_INCLUDEDIN_LOWER_INCLUDEDKeyword_2_0 = (Keyword)cIN_LOWER_INCLUDEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIN_GREATER_INCLUDEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIN_GREATER_INCLUDEDIN_GREATER_INCLUDEDKeyword_3_0 = (Keyword)cIN_GREATER_INCLUDEDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RangeOperatorParameter returns RangeOperatorParameter:
		//                IN_INCLUDED = 'IN_INCLUDED' | IN_EXCLUDED = 'IN_EXCLUDED' | IN_LOWER_INCLUDED = 'IN_LOWER_INCLUDED' | IN_GREATER_INCLUDED = 'IN_GREATER_INCLUDED';
		public EnumRule getRule() { return rule; }
		
		//IN_INCLUDED = 'IN_INCLUDED' | IN_EXCLUDED = 'IN_EXCLUDED' | IN_LOWER_INCLUDED = 'IN_LOWER_INCLUDED' | IN_GREATER_INCLUDED = 'IN_GREATER_INCLUDED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN_INCLUDED = 'IN_INCLUDED'
		public EnumLiteralDeclaration getIN_INCLUDEDEnumLiteralDeclaration_0() { return cIN_INCLUDEDEnumLiteralDeclaration_0; }
		
		//'IN_INCLUDED'
		public Keyword getIN_INCLUDEDIN_INCLUDEDKeyword_0_0() { return cIN_INCLUDEDIN_INCLUDEDKeyword_0_0; }
		
		//IN_EXCLUDED = 'IN_EXCLUDED'
		public EnumLiteralDeclaration getIN_EXCLUDEDEnumLiteralDeclaration_1() { return cIN_EXCLUDEDEnumLiteralDeclaration_1; }
		
		//'IN_EXCLUDED'
		public Keyword getIN_EXCLUDEDIN_EXCLUDEDKeyword_1_0() { return cIN_EXCLUDEDIN_EXCLUDEDKeyword_1_0; }
		
		//IN_LOWER_INCLUDED = 'IN_LOWER_INCLUDED'
		public EnumLiteralDeclaration getIN_LOWER_INCLUDEDEnumLiteralDeclaration_2() { return cIN_LOWER_INCLUDEDEnumLiteralDeclaration_2; }
		
		//'IN_LOWER_INCLUDED'
		public Keyword getIN_LOWER_INCLUDEDIN_LOWER_INCLUDEDKeyword_2_0() { return cIN_LOWER_INCLUDEDIN_LOWER_INCLUDEDKeyword_2_0; }
		
		//IN_GREATER_INCLUDED = 'IN_GREATER_INCLUDED'
		public EnumLiteralDeclaration getIN_GREATER_INCLUDEDEnumLiteralDeclaration_3() { return cIN_GREATER_INCLUDEDEnumLiteralDeclaration_3; }
		
		//'IN_GREATER_INCLUDED'
		public Keyword getIN_GREATER_INCLUDEDIN_GREATER_INCLUDEDKeyword_3_0() { return cIN_GREATER_INCLUDEDIN_GREATER_INCLUDEDKeyword_3_0; }
	}
	public class ArithmeticOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.ArithmeticOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUMSUMKeyword_0_0 = (Keyword)cSUMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENCEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIFFERENCEDIFFERENCEKeyword_1_0 = (Keyword)cDIFFERENCEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTIPLICATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTIPLICATIONMULTIPLICATIONKeyword_2_0 = (Keyword)cMULTIPLICATIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRATIOEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRATIORATIOKeyword_3_0 = (Keyword)cRATIOEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ArithmeticOperator returns ArithmeticOperator:
		//                SUM = 'SUM' | DIFFERENCE = 'DIFFERENCE' | MULTIPLICATION = 'MULTIPLICATION' | RATIO = 'RATIO';
		public EnumRule getRule() { return rule; }
		
		//SUM = 'SUM' | DIFFERENCE = 'DIFFERENCE' | MULTIPLICATION = 'MULTIPLICATION' | RATIO = 'RATIO'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SUM = 'SUM'
		public EnumLiteralDeclaration getSUMEnumLiteralDeclaration_0() { return cSUMEnumLiteralDeclaration_0; }
		
		//'SUM'
		public Keyword getSUMSUMKeyword_0_0() { return cSUMSUMKeyword_0_0; }
		
		//DIFFERENCE = 'DIFFERENCE'
		public EnumLiteralDeclaration getDIFFERENCEEnumLiteralDeclaration_1() { return cDIFFERENCEEnumLiteralDeclaration_1; }
		
		//'DIFFERENCE'
		public Keyword getDIFFERENCEDIFFERENCEKeyword_1_0() { return cDIFFERENCEDIFFERENCEKeyword_1_0; }
		
		//MULTIPLICATION = 'MULTIPLICATION'
		public EnumLiteralDeclaration getMULTIPLICATIONEnumLiteralDeclaration_2() { return cMULTIPLICATIONEnumLiteralDeclaration_2; }
		
		//'MULTIPLICATION'
		public Keyword getMULTIPLICATIONMULTIPLICATIONKeyword_2_0() { return cMULTIPLICATIONMULTIPLICATIONKeyword_2_0; }
		
		//RATIO = 'RATIO'
		public EnumLiteralDeclaration getRATIOEnumLiteralDeclaration_3() { return cRATIOEnumLiteralDeclaration_3; }
		
		//'RATIO'
		public Keyword getRATIORATIOKeyword_3_0() { return cRATIORATIOKeyword_3_0; }
	}
	public class LogicalOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORORKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicalOperator returns LogicalOperator:
		//                AND = 'AND' | OR = 'OR';
		public EnumRule getRule() { return rule; }
		
		//AND = 'AND' | OR = 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND = 'AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//OR = 'OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'OR'
		public Keyword getORORKeyword_1_0() { return cORORKeyword_1_0; }
	}
	public class GroupFairnessMetricElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.GroupFairnessMetric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTATISTICAL_PARITYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTATISTICAL_PARITYSTATISTICAL_PARITYKeyword_0_0 = (Keyword)cSTATISTICAL_PARITYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDISPARATE_IMPACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDISPARATE_IMPACTDISPARATE_IMPACTKeyword_1_0 = (Keyword)cDISPARATE_IMPACTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALIZED_ODDSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQUALIZED_ODDSEQUALIZED_ODDSKeyword_2_0 = (Keyword)cEQUALIZED_ODDSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEQUAL_ACCURACYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEQUAL_ACCURACYEQUAL_ACCURACYKeyword_3_0 = (Keyword)cEQUAL_ACCURACYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFALSE_POSITIVE_DIFFERENCEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFALSE_POSITIVE_DIFFERENCEFALSE_POSITIVE_DIFFERENCEKeyword_4_0 = (Keyword)cFALSE_POSITIVE_DIFFERENCEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTRUE_POSITIVE_DIFFERENCEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTRUE_POSITIVE_DIFFERENCETRUE_POSITIVE_DIFFERENCEKeyword_5_0 = (Keyword)cTRUE_POSITIVE_DIFFERENCEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum GroupFairnessMetric returns GroupFairnessMetric:
		//                STATISTICAL_PARITY = 'STATISTICAL_PARITY' | DISPARATE_IMPACT = 'DISPARATE_IMPACT' | EQUALIZED_ODDS = 'EQUALIZED_ODDS' | EQUAL_ACCURACY = 'EQUAL_ACCURACY' | FALSE_POSITIVE_DIFFERENCE = 'FALSE_POSITIVE_DIFFERENCE' | TRUE_POSITIVE_DIFFERENCE = 'TRUE_POSITIVE_DIFFERENCE';
		public EnumRule getRule() { return rule; }
		
		//STATISTICAL_PARITY = 'STATISTICAL_PARITY' | DISPARATE_IMPACT = 'DISPARATE_IMPACT' | EQUALIZED_ODDS = 'EQUALIZED_ODDS' | EQUAL_ACCURACY = 'EQUAL_ACCURACY' | FALSE_POSITIVE_DIFFERENCE = 'FALSE_POSITIVE_DIFFERENCE' | TRUE_POSITIVE_DIFFERENCE = 'TRUE_POSITIVE_DIFFERENCE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STATISTICAL_PARITY = 'STATISTICAL_PARITY'
		public EnumLiteralDeclaration getSTATISTICAL_PARITYEnumLiteralDeclaration_0() { return cSTATISTICAL_PARITYEnumLiteralDeclaration_0; }
		
		//'STATISTICAL_PARITY'
		public Keyword getSTATISTICAL_PARITYSTATISTICAL_PARITYKeyword_0_0() { return cSTATISTICAL_PARITYSTATISTICAL_PARITYKeyword_0_0; }
		
		//DISPARATE_IMPACT = 'DISPARATE_IMPACT'
		public EnumLiteralDeclaration getDISPARATE_IMPACTEnumLiteralDeclaration_1() { return cDISPARATE_IMPACTEnumLiteralDeclaration_1; }
		
		//'DISPARATE_IMPACT'
		public Keyword getDISPARATE_IMPACTDISPARATE_IMPACTKeyword_1_0() { return cDISPARATE_IMPACTDISPARATE_IMPACTKeyword_1_0; }
		
		//EQUALIZED_ODDS = 'EQUALIZED_ODDS'
		public EnumLiteralDeclaration getEQUALIZED_ODDSEnumLiteralDeclaration_2() { return cEQUALIZED_ODDSEnumLiteralDeclaration_2; }
		
		//'EQUALIZED_ODDS'
		public Keyword getEQUALIZED_ODDSEQUALIZED_ODDSKeyword_2_0() { return cEQUALIZED_ODDSEQUALIZED_ODDSKeyword_2_0; }
		
		//EQUAL_ACCURACY = 'EQUAL_ACCURACY'
		public EnumLiteralDeclaration getEQUAL_ACCURACYEnumLiteralDeclaration_3() { return cEQUAL_ACCURACYEnumLiteralDeclaration_3; }
		
		//'EQUAL_ACCURACY'
		public Keyword getEQUAL_ACCURACYEQUAL_ACCURACYKeyword_3_0() { return cEQUAL_ACCURACYEQUAL_ACCURACYKeyword_3_0; }
		
		//FALSE_POSITIVE_DIFFERENCE = 'FALSE_POSITIVE_DIFFERENCE'
		public EnumLiteralDeclaration getFALSE_POSITIVE_DIFFERENCEEnumLiteralDeclaration_4() { return cFALSE_POSITIVE_DIFFERENCEEnumLiteralDeclaration_4; }
		
		//'FALSE_POSITIVE_DIFFERENCE'
		public Keyword getFALSE_POSITIVE_DIFFERENCEFALSE_POSITIVE_DIFFERENCEKeyword_4_0() { return cFALSE_POSITIVE_DIFFERENCEFALSE_POSITIVE_DIFFERENCEKeyword_4_0; }
		
		//TRUE_POSITIVE_DIFFERENCE = 'TRUE_POSITIVE_DIFFERENCE'
		public EnumLiteralDeclaration getTRUE_POSITIVE_DIFFERENCEEnumLiteralDeclaration_5() { return cTRUE_POSITIVE_DIFFERENCEEnumLiteralDeclaration_5; }
		
		//'TRUE_POSITIVE_DIFFERENCE'
		public Keyword getTRUE_POSITIVE_DIFFERENCETRUE_POSITIVE_DIFFERENCEKeyword_5_0() { return cTRUE_POSITIVE_DIFFERENCETRUE_POSITIVE_DIFFERENCEKeyword_5_0; }
	}
	public class IndividualFairnessMetricElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.modness.Modness.IndividualFairnessMetric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMANHATTAN_DISTANCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMANHATTAN_DISTANCEMANHATTAN_DISTANCEKeyword_0_0 = (Keyword)cMANHATTAN_DISTANCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEUCLIDEAN_DISTANCEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEUCLIDEAN_DISTANCEEUCLIDEAN_DISTANCEKeyword_1_0 = (Keyword)cEUCLIDEAN_DISTANCEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMAHALANOBIS_DISTANCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMAHALANOBIS_DISTANCEMAHALANOBIS_DISTANCEKeyword_2_0 = (Keyword)cMAHALANOBIS_DISTANCEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum IndividualFairnessMetric returns IndividualFairnessMetric:
		//                MANHATTAN_DISTANCE = 'MANHATTAN_DISTANCE' | EUCLIDEAN_DISTANCE = 'EUCLIDEAN_DISTANCE' | MAHALANOBIS_DISTANCE = 'MAHALANOBIS_DISTANCE';
		public EnumRule getRule() { return rule; }
		
		//MANHATTAN_DISTANCE = 'MANHATTAN_DISTANCE' | EUCLIDEAN_DISTANCE = 'EUCLIDEAN_DISTANCE' | MAHALANOBIS_DISTANCE = 'MAHALANOBIS_DISTANCE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MANHATTAN_DISTANCE = 'MANHATTAN_DISTANCE'
		public EnumLiteralDeclaration getMANHATTAN_DISTANCEEnumLiteralDeclaration_0() { return cMANHATTAN_DISTANCEEnumLiteralDeclaration_0; }
		
		//'MANHATTAN_DISTANCE'
		public Keyword getMANHATTAN_DISTANCEMANHATTAN_DISTANCEKeyword_0_0() { return cMANHATTAN_DISTANCEMANHATTAN_DISTANCEKeyword_0_0; }
		
		//EUCLIDEAN_DISTANCE = 'EUCLIDEAN_DISTANCE'
		public EnumLiteralDeclaration getEUCLIDEAN_DISTANCEEnumLiteralDeclaration_1() { return cEUCLIDEAN_DISTANCEEnumLiteralDeclaration_1; }
		
		//'EUCLIDEAN_DISTANCE'
		public Keyword getEUCLIDEAN_DISTANCEEUCLIDEAN_DISTANCEKeyword_1_0() { return cEUCLIDEAN_DISTANCEEUCLIDEAN_DISTANCEKeyword_1_0; }
		
		//MAHALANOBIS_DISTANCE = 'MAHALANOBIS_DISTANCE'
		public EnumLiteralDeclaration getMAHALANOBIS_DISTANCEEnumLiteralDeclaration_2() { return cMAHALANOBIS_DISTANCEEnumLiteralDeclaration_2; }
		
		//'MAHALANOBIS_DISTANCE'
		public Keyword getMAHALANOBIS_DISTANCEMAHALANOBIS_DISTANCEKeyword_2_0() { return cMAHALANOBIS_DISTANCEMAHALANOBIS_DISTANCEKeyword_2_0; }
	}
	
	private final GroupBiasElements pGroupBias;
	private final EqualityOperatorElements pEqualityOperator;
	private final FunctionElements pFunction;
	private final VariableElements pVariable;
	private final VariableValueElements pVariableValue;
	private final EStringElements pEString;
	private final BiasSourceElements eBiasSource;
	private final SensitiveVariableElements pSensitiveVariable;
	private final PositiveOutcomeElements pPositiveOutcome;
	private final SensitiveGroupElements pSensitiveGroup;
	private final GroupAnalysisElements pGroupAnalysis;
	private final SensitiveVariableValueElements pSensitiveVariableValue;
	private final MetricElements pMetric;
	private final DatasetElements pDataset;
	private final DatasetSensitiveGroupElements pDatasetSensitiveGroup;
	private final EFloatElements pEFloat;
	private final SingleOperatorElements pSingleOperator;
	private final RangeOperatorElements pRangeOperator;
	private final SingleOperatorParameterElements eSingleOperatorParameter;
	private final RangeOperatorParameterElements eRangeOperatorParameter;
	private final OperationElements pOperation;
	private final ProbabilityElements pProbability;
	private final ExpectedValueElements pExpectedValue;
	private final GroupSizeElements pGroupSize;
	private final DatasetSizeElements pDatasetSize;
	private final LogaritmElements pLogaritm;
	private final SummationElements pSummation;
	private final ExistingGroupFairnessMetricElements pExistingGroupFairnessMetric;
	private final ExistingIndividualFairnessMetricElements pExistingIndividualFairnessMetric;
	private final ArithmeticOperatorElements eArithmeticOperator;
	private final OperatorComponentElements pOperatorComponent;
	private final OperationValueElements pOperationValue;
	private final LogicalConditionElements pLogicalCondition;
	private final SubLogicalConditionElements pSubLogicalCondition;
	private final VariableValue_ImplElements pVariableValue_Impl;
	private final LogicalOperatorElements eLogicalOperator;
	private final EBooleanElements pEBoolean;
	private final DatasetPositiveOutcomeElements pDatasetPositiveOutcome;
	private final DatasetSensitiveVariableValueElements pDatasetSensitiveVariableValue;
	private final OtherVariableElements pOtherVariable;
	private final GroupFairnessMetricElements eGroupFairnessMetric;
	private final IndividualFairnessMetricElements eIndividualFairnessMetric;
	private final DatasetSensitiveVariableElements pDatasetSensitiveVariable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ModnessGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGroupBias = new GroupBiasElements();
		this.pEqualityOperator = new EqualityOperatorElements();
		this.pFunction = new FunctionElements();
		this.pVariable = new VariableElements();
		this.pVariableValue = new VariableValueElements();
		this.pEString = new EStringElements();
		this.eBiasSource = new BiasSourceElements();
		this.pSensitiveVariable = new SensitiveVariableElements();
		this.pPositiveOutcome = new PositiveOutcomeElements();
		this.pSensitiveGroup = new SensitiveGroupElements();
		this.pGroupAnalysis = new GroupAnalysisElements();
		this.pSensitiveVariableValue = new SensitiveVariableValueElements();
		this.pMetric = new MetricElements();
		this.pDataset = new DatasetElements();
		this.pDatasetSensitiveGroup = new DatasetSensitiveGroupElements();
		this.pEFloat = new EFloatElements();
		this.pSingleOperator = new SingleOperatorElements();
		this.pRangeOperator = new RangeOperatorElements();
		this.eSingleOperatorParameter = new SingleOperatorParameterElements();
		this.eRangeOperatorParameter = new RangeOperatorParameterElements();
		this.pOperation = new OperationElements();
		this.pProbability = new ProbabilityElements();
		this.pExpectedValue = new ExpectedValueElements();
		this.pGroupSize = new GroupSizeElements();
		this.pDatasetSize = new DatasetSizeElements();
		this.pLogaritm = new LogaritmElements();
		this.pSummation = new SummationElements();
		this.pExistingGroupFairnessMetric = new ExistingGroupFairnessMetricElements();
		this.pExistingIndividualFairnessMetric = new ExistingIndividualFairnessMetricElements();
		this.eArithmeticOperator = new ArithmeticOperatorElements();
		this.pOperatorComponent = new OperatorComponentElements();
		this.pOperationValue = new OperationValueElements();
		this.pLogicalCondition = new LogicalConditionElements();
		this.pSubLogicalCondition = new SubLogicalConditionElements();
		this.pVariableValue_Impl = new VariableValue_ImplElements();
		this.eLogicalOperator = new LogicalOperatorElements();
		this.pEBoolean = new EBooleanElements();
		this.pDatasetPositiveOutcome = new DatasetPositiveOutcomeElements();
		this.pDatasetSensitiveVariableValue = new DatasetSensitiveVariableValueElements();
		this.pOtherVariable = new OtherVariableElements();
		this.eGroupFairnessMetric = new GroupFairnessMetricElements();
		this.eIndividualFairnessMetric = new IndividualFairnessMetricElements();
		this.pDatasetSensitiveVariable = new DatasetSensitiveVariableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.modness.Modness".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GroupBias returns GroupBias:
	//    'GroupBias'
	//    name=EString
	//    '{'
	//        'domain:' domain=EString ';'
	//        'source:' source+=BiasSource ( "," source+=BiasSource)* ';'
	//        'sensitiveVariables:' '{' sensitiveVariables+=SensitiveVariable ( "," sensitiveVariables+=SensitiveVariable)* '};'
	//        'positiveOutcome:' positiveOutcome=PositiveOutcome ';'
	//        'unprivilegedGroup:' '{' unprivilegedGroup+=SensitiveGroup ( "," unprivilegedGroup+=SensitiveGroup)* '};'
	//        'privilegedGroup:' '{' privilegedGroup+=SensitiveGroup ( "," privilegedGroup+=SensitiveGroup)* '};'
	//        'analysis:' '{' analysis+=GroupAnalysis ( "," analysis+=GroupAnalysis)* '};'
	//    '}';
	public GroupBiasElements getGroupBiasAccess() {
		return pGroupBias;
	}
	
	public ParserRule getGroupBiasRule() {
		return getGroupBiasAccess().getRule();
	}
	
	//EqualityOperator returns EqualityOperator:
	//    SingleOperator | RangeOperator;
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return pEqualityOperator;
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//Function returns Function:
	//    Operation | Probability | ExpectedValue | GroupSize | DatasetSize | Logaritm | Summation | ExistingGroupFairnessMetric | ExistingIndividualFairnessMetric;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Variable returns Variable:
	//    SensitiveVariable | OtherVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VariableValue returns VariableValue:
	//    VariableValue_Impl | DatasetPositiveOutcome | DatasetSensitiveVariableValue;
	public VariableValueElements getVariableValueAccess() {
		return pVariableValue;
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum BiasSource returns BiasSource:
	//                WRONG_ALGORITHM_BEHAVIOUR = 'WRONG_ALGORITHM_BEHAVIOUR' | HUMAN_DISCRIMINATION = 'HUMAN_DISCRIMINATION' | WRONG_MEASUREMENT = 'WRONG_MEASUREMENT' | OMITTED_VARIABLE = 'OMITTED_VARIABLE' | WRONG_SAMPLING = 'WRONG_SAMPLING' | WRONG_AGGREGATION = 'WRONG_AGGREGATION' | WRONG_LINKING = 'WRONG_LINKING' | WRONG_PRESENTATION = 'WRONG_PRESENTATION' | RESULT_RANKING = 'RESULT_RANKING' | WRONG_SYSTEM_EVALUATION = 'WRONG_SYSTEM_EVALUATION' | WRONG_SYSTEM_TARGET_POPULATION = 'WRONG_SYSTEM_TARGET_POPULATION' | CHANGE_IN_TARGET_POPULATION = 'CHANGE_IN_TARGET_POPULATION';
	public BiasSourceElements getBiasSourceAccess() {
		return eBiasSource;
	}
	
	public EnumRule getBiasSourceRule() {
		return getBiasSourceAccess().getRule();
	}
	
	//SensitiveVariable returns SensitiveVariable:
	//    'SensitiveVariable{'
	//        'name:' name=EString';'
	//        'values:' sensitiveVariableValue+=SensitiveVariableValue ( "," sensitiveVariableValue+=SensitiveVariableValue)*';'
	//    '}';
	public SensitiveVariableElements getSensitiveVariableAccess() {
		return pSensitiveVariable;
	}
	
	public ParserRule getSensitiveVariableRule() {
		return getSensitiveVariableAccess().getRule();
	}
	
	//PositiveOutcome returns PositiveOutcome:
	//        name=EString
	//;
	public PositiveOutcomeElements getPositiveOutcomeAccess() {
		return pPositiveOutcome;
	}
	
	public ParserRule getPositiveOutcomeRule() {
		return getPositiveOutcomeAccess().getRule();
	}
	
	//SensitiveGroup returns SensitiveGroup:
	//    'SensitiveGroup'
	//    '{'
	//        'name:' name=EString';'
	//        'sensitiveValue:' sensitiveValue+=[SensitiveVariableValue|EString] ( "," sensitiveValue+=[SensitiveVariableValue|EString])*';'
	//    '};';
	public SensitiveGroupElements getSensitiveGroupAccess() {
		return pSensitiveGroup;
	}
	
	public ParserRule getSensitiveGroupRule() {
		return getSensitiveGroupAccess().getRule();
	}
	
	//GroupAnalysis returns GroupAnalysis:
	//    'GroupAnalysis'
	//    //name=EString
	//    '{'
	//        ('scope:' scope=EString)?';'
	//        'metric:' '{' metric+=Metric ( "," metric+=Metric)* '};'
	//        'dataset:' '{' dataset+=Dataset ( "," dataset+=Dataset)* '};'
	//        'datasetUnprivilegedGroup:' datasetUnprivilegedGroup+=DatasetSensitiveGroup ( "," datasetUnprivilegedGroup+=DatasetSensitiveGroup)*
	//        'datasetPrivilegedGroup:' datasetPrivilegedGroup+=DatasetSensitiveGroup ( "," datasetPrivilegedGroup+=DatasetSensitiveGroup)*
	//    '};';
	public GroupAnalysisElements getGroupAnalysisAccess() {
		return pGroupAnalysis;
	}
	
	public ParserRule getGroupAnalysisRule() {
		return getGroupAnalysisAccess().getRule();
	}
	
	//SensitiveVariableValue returns SensitiveVariableValue:
	//    name=EString
	//;
	public SensitiveVariableValueElements getSensitiveVariableValueAccess() {
		return pSensitiveVariableValue;
	}
	
	public ParserRule getSensitiveVariableValueRule() {
		return getSensitiveVariableValueAccess().getRule();
	}
	
	//Metric returns Metric:
	//    'Metric'
	//    '{'
	//        'name:' name=EString';'
	//        'toleranceValue:' toleranceValue=EFloat';'
	//        'operator:' operator=EqualityOperator
	//        'function:' function=Function
	//    '};';
	public MetricElements getMetricAccess() {
		return pMetric;
	}
	
	public ParserRule getMetricRule() {
		return getMetricAccess().getRule();
	}
	
	//Dataset returns Dataset:
	//    'Dataset'
	//    '{'
	//        'name:' name=EString';'
	//        ('groundTruthLabelName:' groundTruthLabelName=EString';')?
	//        ('predictedLabelName:' predictedLabelName=EString';')?
	//        'filePath:' filePath=EString';'
	//        ('otherVariable:' '{' otherVariable+=OtherVariable ( "," otherVariable+=OtherVariable)* '};' )?
	//        'positiveOutcome:' positiveOutcome=DatasetPositiveOutcome
	//        'datasetSentiveVariable:' '{' datasetSentiveVariable+=DatasetSensitiveVariable ( "," datasetSentiveVariable+=DatasetSensitiveVariable)* '};'
	//    '}';
	public DatasetElements getDatasetAccess() {
		return pDataset;
	}
	
	public ParserRule getDatasetRule() {
		return getDatasetAccess().getRule();
	}
	
	//DatasetSensitiveGroup returns DatasetSensitiveGroup:
	//    '{'
	//        'mappingGroup' mappingGroup=[SensitiveGroup|EString]';'
	//        'sensitiveVariables:' '(' sensitiveVariables+=[DatasetSensitiveVariableValue|EString] ( "," sensitiveVariables+=[DatasetSensitiveVariableValue|EString])* ');'
	//    '};';
	public DatasetSensitiveGroupElements getDatasetSensitiveGroupAccess() {
		return pDatasetSensitiveGroup;
	}
	
	public ParserRule getDatasetSensitiveGroupRule() {
		return getDatasetSensitiveGroupAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//SingleOperator returns SingleOperator:
	//    '{'
	//         'parameter:' operator=SingleOperatorParameter';'
	//        'value:' value=EFloat';'
	//    '};'
	//;
	public SingleOperatorElements getSingleOperatorAccess() {
		return pSingleOperator;
	}
	
	public ParserRule getSingleOperatorRule() {
		return getSingleOperatorAccess().getRule();
	}
	
	//RangeOperator returns RangeOperator:
	//    '{'
	//        'parameter:' operator=RangeOperatorParameter';'
	//        'lowerValue:' lowerValue=EFloat';'
	//        'greaterValue:' greaterValue=EFloat';'
	//    '};'
	//;
	public RangeOperatorElements getRangeOperatorAccess() {
		return pRangeOperator;
	}
	
	public ParserRule getRangeOperatorRule() {
		return getRangeOperatorAccess().getRule();
	}
	
	//enum SingleOperatorParameter returns SingleOperatorParameter:
	//                EQUAL = 'EQUAL' | GREATER = 'GREATER' | MINOR = 'MINOR' | GREATER_EQUAL = 'GREATER_EQUAL' | MINOR_EQUAL = 'MINOR_EQUAL' | NOT_EQUAL = 'NOT_EQUAL';
	public SingleOperatorParameterElements getSingleOperatorParameterAccess() {
		return eSingleOperatorParameter;
	}
	
	public EnumRule getSingleOperatorParameterRule() {
		return getSingleOperatorParameterAccess().getRule();
	}
	
	//enum RangeOperatorParameter returns RangeOperatorParameter:
	//                IN_INCLUDED = 'IN_INCLUDED' | IN_EXCLUDED = 'IN_EXCLUDED' | IN_LOWER_INCLUDED = 'IN_LOWER_INCLUDED' | IN_GREATER_INCLUDED = 'IN_GREATER_INCLUDED';
	public RangeOperatorParameterElements getRangeOperatorParameterAccess() {
		return eRangeOperatorParameter;
	}
	
	public EnumRule getRangeOperatorParameterRule() {
		return getRangeOperatorParameterAccess().getRule();
	}
	
	//Operation returns Operation:
	//    'Operation'
	//    name=EString
	//    '{'
	//        'equalityOperator' equalityOperator=ArithmeticOperator
	//        'leftSide' leftSide=OperatorComponent
	//        'rightSide' rightSide=OperatorComponent
	//    '}';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Probability returns Probability:
	//    'Probability'
	//    name=EString
	//    '{'
	//        'object' object=LogicalCondition
	//        ('condition' condition=LogicalCondition)?
	//    '}';
	public ProbabilityElements getProbabilityAccess() {
		return pProbability;
	}
	
	public ParserRule getProbabilityRule() {
		return getProbabilityAccess().getRule();
	}
	
	//ExpectedValue returns ExpectedValue:
	//    'ExpectedValue'
	//    name=EString
	//    '{'
	//        'columnName' columnName=EString
	//        ('condition' condition=LogicalCondition)?
	//    '}';
	public ExpectedValueElements getExpectedValueAccess() {
		return pExpectedValue;
	}
	
	public ParserRule getExpectedValueRule() {
		return getExpectedValueAccess().getRule();
	}
	
	//GroupSize returns GroupSize:
	//    {GroupSize}
	//    'GroupSize'
	//    name=EString
	//    '{'
	//        ('variable' variable=[Variable|EString])?
	//        ('groupCondition' groupCondition=LogicalCondition)?
	//    '}';
	public GroupSizeElements getGroupSizeAccess() {
		return pGroupSize;
	}
	
	public ParserRule getGroupSizeRule() {
		return getGroupSizeAccess().getRule();
	}
	
	//DatasetSize returns DatasetSize:
	//    {DatasetSize}
	//    'DatasetSize'
	//    name=EString;
	public DatasetSizeElements getDatasetSizeAccess() {
		return pDatasetSize;
	}
	
	public ParserRule getDatasetSizeRule() {
		return getDatasetSizeAccess().getRule();
	}
	
	//Logaritm returns Logaritm:
	//    'Logaritm'
	//    name=EString
	//    '{'
	//        'operatorcomponent' operatorcomponent=OperatorComponent
	//    '}';
	public LogaritmElements getLogaritmAccess() {
		return pLogaritm;
	}
	
	public ParserRule getLogaritmRule() {
		return getLogaritmAccess().getRule();
	}
	
	//Summation returns Summation:
	//    'Summation'
	//    name=EString
	//    '{'
	//        'startRange' startRange=OperatorComponent
	//        'endRange' endRange=OperatorComponent
	//        'body' body=OperatorComponent
	//    '}';
	public SummationElements getSummationAccess() {
		return pSummation;
	}
	
	public ParserRule getSummationRule() {
		return getSummationAccess().getRule();
	}
	
	//ExistingGroupFairnessMetric returns ExistingGroupFairnessMetric:
	//    'ExistingGroupFairnessMetric'
	//    //name=EString
	//    '{'
	//        'metric:' metric=GroupFairnessMetric';'
	//    '};'
	//    ;
	public ExistingGroupFairnessMetricElements getExistingGroupFairnessMetricAccess() {
		return pExistingGroupFairnessMetric;
	}
	
	public ParserRule getExistingGroupFairnessMetricRule() {
		return getExistingGroupFairnessMetricAccess().getRule();
	}
	
	//ExistingIndividualFairnessMetric returns ExistingIndividualFairnessMetric:
	//    'ExistingIndividualFairnessMetric'
	//    name=EString
	//    '{'
	//        'metric:' metric=IndividualFairnessMetric';'
	//    '};'
	//    ;
	public ExistingIndividualFairnessMetricElements getExistingIndividualFairnessMetricAccess() {
		return pExistingIndividualFairnessMetric;
	}
	
	public ParserRule getExistingIndividualFairnessMetricRule() {
		return getExistingIndividualFairnessMetricAccess().getRule();
	}
	
	//enum ArithmeticOperator returns ArithmeticOperator:
	//                SUM = 'SUM' | DIFFERENCE = 'DIFFERENCE' | MULTIPLICATION = 'MULTIPLICATION' | RATIO = 'RATIO';
	public ArithmeticOperatorElements getArithmeticOperatorAccess() {
		return eArithmeticOperator;
	}
	
	public EnumRule getArithmeticOperatorRule() {
		return getArithmeticOperatorAccess().getRule();
	}
	
	//OperatorComponent returns OperatorComponent:
	//    {OperatorComponent}
	//    'OperatorComponent'
	//    name=EString
	//    '{'
	//        ('function' function=Function)?
	//        ('operationvalue' operationvalue=OperationValue)?
	//    '}';
	public OperatorComponentElements getOperatorComponentAccess() {
		return pOperatorComponent;
	}
	
	public ParserRule getOperatorComponentRule() {
		return getOperatorComponentAccess().getRule();
	}
	
	//OperationValue returns OperationValue:
	//    'OperationValue'
	//    '{'
	//        'value' value=EFloat
	//    '}';
	public OperationValueElements getOperationValueAccess() {
		return pOperationValue;
	}
	
	public ParserRule getOperationValueRule() {
		return getOperationValueAccess().getRule();
	}
	
	//LogicalCondition returns LogicalCondition:
	//    {LogicalCondition}
	//    'LogicalCondition'
	//    name=EString
	//    '{'
	//        ('value' value=[VariableValue|EString])?
	//        ('sensitivegroup' sensitivegroup=[DatasetSensitiveGroup|EString])?
	//        ('sublogicalcondition' sublogicalcondition=SubLogicalCondition)?
	//    '}';
	public LogicalConditionElements getLogicalConditionAccess() {
		return pLogicalCondition;
	}
	
	public ParserRule getLogicalConditionRule() {
		return getLogicalConditionAccess().getRule();
	}
	
	//SubLogicalCondition returns SubLogicalCondition:
	//    'SubLogicalCondition'
	//    name=EString
	//    '{'
	//        'logicalOperator' logicalOperator=LogicalOperator
	//        'logicalcondition' logicalcondition=LogicalCondition
	//    '}';
	public SubLogicalConditionElements getSubLogicalConditionAccess() {
		return pSubLogicalCondition;
	}
	
	public ParserRule getSubLogicalConditionRule() {
		return getSubLogicalConditionAccess().getRule();
	}
	
	//VariableValue_Impl returns VariableValue:
	//    (relativeToDatasetSize?='relativeToDatasetSize')?
	//    'VariableValue'
	//    name=EString
	//    '{'
	//        'operator' operator=EqualityOperator
	//    '}';
	public VariableValue_ImplElements getVariableValue_ImplAccess() {
		return pVariableValue_Impl;
	}
	
	public ParserRule getVariableValue_ImplRule() {
		return getVariableValue_ImplAccess().getRule();
	}
	
	//enum LogicalOperator returns LogicalOperator:
	//                AND = 'AND' | OR = 'OR';
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return eLogicalOperator;
	}
	
	public EnumRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//DatasetPositiveOutcome returns DatasetPositiveOutcome:
	//    (relativeToDatasetSize?='relativeToDatasetSize')?
	//    //name=EString
	//    '{'
	//        'outcome:' mappingPositiveOutcome=[PositiveOutcome|EString]';'
	//        'value:' operator=EqualityOperator
	//    '};';
	public DatasetPositiveOutcomeElements getDatasetPositiveOutcomeAccess() {
		return pDatasetPositiveOutcome;
	}
	
	public ParserRule getDatasetPositiveOutcomeRule() {
		return getDatasetPositiveOutcomeAccess().getRule();
	}
	
	//DatasetSensitiveVariableValue returns DatasetSensitiveVariableValue:
	//    'SensitiveVariableValue'
	//    '{'
	//        'id:' name=EString';'
	//        'mappingValue:' mappingValue=[SensitiveVariableValue|EString]';'
	//        'value:' operator=EqualityOperator
	//        (relativeToDatasetSize?='relativeToDatasetSize'';')?
	//    '}';
	public DatasetSensitiveVariableValueElements getDatasetSensitiveVariableValueAccess() {
		return pDatasetSensitiveVariableValue;
	}
	
	public ParserRule getDatasetSensitiveVariableValueRule() {
		return getDatasetSensitiveVariableValueAccess().getRule();
	}
	
	//OtherVariable returns OtherVariable:
	//    {OtherVariable}
	//    'OtherVariable'
	//    name=EString
	//    '{'
	//        ('othervariablevalue' '{' othervariablevalue+=VariableValue ( "," othervariablevalue+=VariableValue)* '}' )?
	//    '}';
	public OtherVariableElements getOtherVariableAccess() {
		return pOtherVariable;
	}
	
	public ParserRule getOtherVariableRule() {
		return getOtherVariableAccess().getRule();
	}
	
	//enum GroupFairnessMetric returns GroupFairnessMetric:
	//                STATISTICAL_PARITY = 'STATISTICAL_PARITY' | DISPARATE_IMPACT = 'DISPARATE_IMPACT' | EQUALIZED_ODDS = 'EQUALIZED_ODDS' | EQUAL_ACCURACY = 'EQUAL_ACCURACY' | FALSE_POSITIVE_DIFFERENCE = 'FALSE_POSITIVE_DIFFERENCE' | TRUE_POSITIVE_DIFFERENCE = 'TRUE_POSITIVE_DIFFERENCE';
	public GroupFairnessMetricElements getGroupFairnessMetricAccess() {
		return eGroupFairnessMetric;
	}
	
	public EnumRule getGroupFairnessMetricRule() {
		return getGroupFairnessMetricAccess().getRule();
	}
	
	//enum IndividualFairnessMetric returns IndividualFairnessMetric:
	//                MANHATTAN_DISTANCE = 'MANHATTAN_DISTANCE' | EUCLIDEAN_DISTANCE = 'EUCLIDEAN_DISTANCE' | MAHALANOBIS_DISTANCE = 'MAHALANOBIS_DISTANCE';
	public IndividualFairnessMetricElements getIndividualFairnessMetricAccess() {
		return eIndividualFairnessMetric;
	}
	
	public EnumRule getIndividualFairnessMetricRule() {
		return getIndividualFairnessMetricAccess().getRule();
	}
	
	//DatasetSensitiveVariable returns DatasetSensitiveVariable:
	//    'DatasetSensitiveVariable'
	//    '{'
	//        'name:' name=EString';'
	//        'mappingSensitiveVariable:' mappingSensitiveVariable=[SensitiveVariable|EString]';'
	//        'values:' '{' datasetsensitivevariablevalue+=DatasetSensitiveVariableValue ( "," datasetsensitivevariablevalue+=DatasetSensitiveVariableValue)* '}'
	//    '}';
	public DatasetSensitiveVariableElements getDatasetSensitiveVariableAccess() {
		return pDatasetSensitiveVariable;
	}
	
	public ParserRule getDatasetSensitiveVariableRule() {
		return getDatasetSensitiveVariableAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
